
PWM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db0  08004db0  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db0  08004db0  00005db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004db4  08004db4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08004db8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2400002c  08004de4  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000144  08004de4  00006144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153fa  00000000  00000000  0000605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002656  00000000  00000000  0001b454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3a  00000000  00000000  0001eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acaa  00000000  00000000  0001f8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e2  00000000  00000000  0005a584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018801c  00000000  00000000  0006fa66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f7a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ec  00000000  00000000  001f7ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001fc2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d5c 	.word	0x08004d5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08004d5c 	.word	0x08004d5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 800079c:	bf00      	nop
 800079e:	4b51      	ldr	r3, [pc, #324]	@ (80008e4 <main+0x154>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
		;
	if (timeout < 0) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
		Error_Handler();
 80007ba:	f000 fa0f 	bl	8000bdc <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fcd1 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f895 	bl	80008f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4b47      	ldr	r3, [pc, #284]	@ (80008e4 <main+0x154>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a45      	ldr	r2, [pc, #276]	@ (80008e4 <main+0x154>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b43      	ldr	r3, [pc, #268]	@ (80008e4 <main+0x154>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 f8db 	bl	80019a0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 f8f1 	bl	80019d4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80007f8:	bf00      	nop
 80007fa:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <main+0x154>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
		;
	if (timeout < 0) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
		Error_Handler();
 8000816:	f000 f9e1 	bl	8000bdc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f937 	bl	8000a8c <MX_GPIO_Init>
  MX_TIM2_Init();
 800081e:	f000 f8d1 	bl	80009c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000822:	2100      	movs	r1, #0
 8000824:	4830      	ldr	r0, [pc, #192]	@ (80008e8 <main+0x158>)
 8000826:	f002 fc3f 	bl	80030a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800082a:	2104      	movs	r1, #4
 800082c:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <main+0x158>)
 800082e:	f002 fc3b 	bl	80030a8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000832:	2000      	movs	r0, #0
 8000834:	f000 face 	bl	8000dd4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 facb 	bl	8000dd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083e:	2002      	movs	r0, #2
 8000840:	f000 fac8 	bl	8000dd4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000844:	2101      	movs	r1, #1
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fb3a 	bl	8000ec0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <main+0x15c>)
 800084e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000852:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <main+0x15c>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800085a:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <main+0x15c>)
 800085c:	2200      	movs	r2, #0
 800085e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <main+0x15c>)
 8000862:	2200      	movs	r2, #0
 8000864:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <main+0x15c>)
 8000868:	2200      	movs	r2, #0
 800086a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800086c:	491f      	ldr	r1, [pc, #124]	@ (80008ec <main+0x15c>)
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fbb6 	bl	8000fe0 <BSP_COM_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <main+0xee>
  {
    Error_Handler();
 800087a:	f000 f9af 	bl	8000bdc <Error_Handler>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 512);
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <main+0x158>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <main+0x158>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_Delay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000894:	f000 fcf8 	bl	8001288 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <main+0x158>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <main+0x158>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2200      	movs	r2, #0
 80008a6:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_Delay(100);
 80008a8:	2064      	movs	r0, #100	@ 0x64
 80008aa:	f000 fced 	bl	8001288 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <main+0x158>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 512);
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <main+0x158>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008be:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008c4:	f000 fce0 	bl	8001288 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <main+0x158>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <main+0x158>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2200      	movs	r2, #0
 80008d6:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f000 fcd5 	bl	8001288 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 512);
 80008de:	bf00      	nop
 80008e0:	e7cd      	b.n	800087e <main+0xee>
 80008e2:	bf00      	nop
 80008e4:	58024400 	.word	0x58024400
 80008e8:	24000058 	.word	0x24000058
 80008ec:	24000048 	.word	0x24000048

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fa00 	bl	8004d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f9fa 	bl	8004d04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000910:	2004      	movs	r0, #4
 8000912:	f001 f873 	bl	80019fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <SystemClock_Config+0xcc>)
 800091c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091e:	4a27      	ldr	r2, [pc, #156]	@ (80009bc <SystemClock_Config+0xcc>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000926:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <SystemClock_Config+0xcc>)
 8000928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <SystemClock_Config+0xd0>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094c:	bf00      	nop
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <SystemClock_Config+0xd0>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095a:	d1f8      	bne.n	800094e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000960:	2301      	movs	r3, #1
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f89d 	bl	8001ab0 <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800097c:	f000 f92e 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	233f      	movs	r3, #63	@ 0x3f
 8000982:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2101      	movs	r1, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fcdd 	bl	8002364 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b0:	f000 f914 	bl	8000bdc <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3770      	adds	r7, #112	@ 0x70
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58000400 	.word	0x58000400
 80009c0:	58024800 	.word	0x58024800

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 80009fe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000a02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a10:	481d      	ldr	r0, [pc, #116]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a12:	f002 faf1 	bl	8002ff8 <HAL_TIM_PWM_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f8de 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4816      	ldr	r0, [pc, #88]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a30:	f003 f8f8 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a3a:	f000 f8cf 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3e:	2360      	movs	r3, #96	@ 0x60
 8000a40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a56:	f002 fc35 	bl	80032c4 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a60:	f000 f8bc 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2204      	movs	r2, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a6c:	f002 fc2a 	bl	80032c4 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a76:	f000 f8b1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM2_Init+0xc4>)
 8000a7c:	f000 f8ee 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000058 	.word	0x24000058

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b49      	ldr	r3, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a47      	ldr	r2, [pc, #284]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b45      	ldr	r3, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b41      	ldr	r3, [pc, #260]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a40      	ldr	r2, [pc, #256]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	4a38      	ldr	r2, [pc, #224]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aee:	4b36      	ldr	r3, [pc, #216]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afc:	4b32      	ldr	r3, [pc, #200]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <MX_GPIO_Init+0x13c>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b1a:	2332      	movs	r3, #50	@ 0x32
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	@ (8000bcc <MX_GPIO_Init+0x140>)
 8000b36:	f000 fd69 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b3a:	2386      	movs	r3, #134	@ 0x86
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <MX_GPIO_Init+0x144>)
 8000b56:	f000 fd59 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4817      	ldr	r0, [pc, #92]	@ (8000bd4 <MX_GPIO_Init+0x148>)
 8000b78:	f000 fd48 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b7c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b8e:	230a      	movs	r3, #10
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_GPIO_Init+0x144>)
 8000b9a:	f000 fd37 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b9e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <MX_GPIO_Init+0x14c>)
 8000bbc:	f000 fd26 	bl	800160c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020800 	.word	0x58020800
 8000bd0:	58020000 	.word	0x58020000
 8000bd4:	58020400 	.word	0x58020400
 8000bd8:	58021800 	.word	0x58021800

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf4:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x30>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2c:	d10e      	bne.n	8000c4c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	58024400 	.word	0x58024400

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c7c:	d13d      	bne.n	8000cfa <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	4a1f      	ldr	r2, [pc, #124]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_TIM_MspPostInit+0xa8>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <HAL_TIM_MspPostInit+0xac>)
 8000cd6:	f000 fc99 	bl	800160c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cea:	2301      	movs	r3, #1
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_TIM_MspPostInit+0xb0>)
 8000cf6:	f000 fc89 	bl	800160c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	@ 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	58020400 	.word	0x58020400

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 fa6f 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f916 	bl	8000fa4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000db8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d80:	f7ff fcee 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fc3e 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f003 ffb1 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fced 	bl	8000790 <main>
  bx  lr
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc0:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000dc4:	08004db8 	.word	0x08004db8
  ldr r2, =_sbss
 8000dc8:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000dcc:	24000144 	.word	0x24000144

08000dd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC3_IRQHandler>
	...

08000dd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d009      	beq.n	8000dfc <BSP_LED_Init+0x28>
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d006      	beq.n	8000dfc <BSP_LED_Init+0x28>
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d003      	beq.n	8000dfc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000df4:	f06f 0301 	mvn.w	r3, #1
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dfa:	e055      	b.n	8000ea8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10f      	bne.n	8000e22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	e021      	b.n	8000e66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10f      	bne.n	8000e48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e28:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a21      	ldr	r2, [pc, #132]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	e00e      	b.n	8000e66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	4a19      	ldr	r2, [pc, #100]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <BSP_LED_Init+0xe0>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a13      	ldr	r2, [pc, #76]	@ (8000eb8 <BSP_LED_Init+0xe4>)
 8000e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <BSP_LED_Init+0xe8>)
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	f107 0218 	add.w	r2, r7, #24
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fbbe 	bl	800160c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <BSP_LED_Init+0xe8>)
 8000e94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <BSP_LED_Init+0xe4>)
 8000e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f000 fd62 	bl	800196c <HAL_GPIO_WritePin>
  }

  return ret;
 8000ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3730      	adds	r7, #48	@ 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	08004d84 	.word	0x08004d84
 8000ebc:	2400000c 	.word	0x2400000c

08000ec0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f8c <BSP_PB_Init+0xcc>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f8c <BSP_PB_Init+0xcc>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <BSP_PB_Init+0xcc>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4a21      	ldr	r2, [pc, #132]	@ (8000f90 <BSP_PB_Init+0xd0>)
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fb79 	bl	800160c <HAL_GPIO_Init>
 8000f1a:	e031      	b.n	8000f80 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000f1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f20:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4a1a      	ldr	r2, [pc, #104]	@ (8000f90 <BSP_PB_Init+0xd0>)
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	f107 020c 	add.w	r2, r7, #12
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fb6b 	bl	800160c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4a16      	ldr	r2, [pc, #88]	@ (8000f94 <BSP_PB_Init+0xd4>)
 8000f3c:	441a      	add	r2, r3
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4915      	ldr	r1, [pc, #84]	@ (8000f98 <BSP_PB_Init+0xd8>)
 8000f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f000 fb0e 	bl	800156a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <BSP_PB_Init+0xd4>)
 8000f54:	1898      	adds	r0, r3, r2
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <BSP_PB_Init+0xdc>)
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	f000 fae3 	bl	800152c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f66:	2028      	movs	r0, #40	@ 0x28
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <BSP_PB_Init+0xe0>)
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	f000 fa93 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f78:	2328      	movs	r3, #40	@ 0x28
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 faa9 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	24000018 	.word	0x24000018
 8000f94:	240000a4 	.word	0x240000a4
 8000f98:	08004d8c 	.word	0x08004d8c
 8000f9c:	2400001c 	.word	0x2400001c
 8000fa0:	24000020 	.word	0x24000020

08000fa4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <BSP_PB_IRQHandler+0x20>)
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 faec 	bl	8001594 <HAL_EXTI_IRQHandler>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	240000a4 	.word	0x240000a4

08000fc8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ff6:	f06f 0301 	mvn.w	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e018      	b.n	8001030 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2294      	movs	r2, #148	@ 0x94
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <BSP_COM_Init+0x5c>)
 8001008:	4413      	add	r3, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f852 	bl	80010b4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2294      	movs	r2, #148	@ 0x94
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <BSP_COM_Init+0x5c>)
 800101a:	4413      	add	r3, r2
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f80e 	bl	8001040 <MX_USART3_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800102a:	f06f 0303 	mvn.w	r3, #3
 800102e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	240000ac 	.word	0x240000ac

08001040 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_USART3_Init+0x60>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	220c      	movs	r2, #12
 800105e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	895b      	ldrh	r3, [r3, #10]
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	891b      	ldrh	r3, [r3, #8]
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	899b      	ldrh	r3, [r3, #12]
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800108c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f002 fe56 	bl	8003d40 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	24000008 	.word	0x24000008

080010a4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff8d 	bl	8000fc8 <BSP_PB_Callback>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <COM1_MspInit+0xa8>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	4a26      	ldr	r2, [pc, #152]	@ (800115c <COM1_MspInit+0xa8>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010cc:	4b23      	ldr	r3, [pc, #140]	@ (800115c <COM1_MspInit+0xa8>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <COM1_MspInit+0xa8>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <COM1_MspInit+0xa8>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <COM1_MspInit+0xa8>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <COM1_MspInit+0xa8>)
 80010fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010fe:	4a17      	ldr	r2, [pc, #92]	@ (800115c <COM1_MspInit+0xa8>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <COM1_MspInit+0xa8>)
 800110a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800110e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001128:	2307      	movs	r3, #7
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <COM1_MspInit+0xac>)
 8001134:	f000 fa6a 	bl	800160c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4804      	ldr	r0, [pc, #16]	@ (8001160 <COM1_MspInit+0xac>)
 800114e:	f000 fa5d 	bl	800160c <HAL_GPIO_Init>
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	58020c00 	.word	0x58020c00

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f98c 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001170:	f001 faae 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001174:	4602      	mov	r2, r0
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_Init+0x68>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	4913      	ldr	r1, [pc, #76]	@ (80011d0 <HAL_Init+0x6c>)
 8001182:	5ccb      	ldrb	r3, [r1, r3]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <HAL_Init+0x6c>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_Init+0x70>)
 80011a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011a8:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_Init+0x74>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f814 	bl	80011dc <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e002      	b.n	80011c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011be:	f7ff fd13 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400
 80011d0:	08004d74 	.word	0x08004d74
 80011d4:	24000004 	.word	0x24000004
 80011d8:	24000000 	.word	0x24000000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e021      	b.n	8001234 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <HAL_InitTick+0x64>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_InitTick+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f971 	bl	80014ee <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001224:	f000 f93b 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x68>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000028 	.word	0x24000028
 8001240:	24000000 	.word	0x24000000
 8001244:	24000024 	.word	0x24000024

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	24000028 	.word	0x24000028
 800126c:	24000140 	.word	0x24000140

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	24000140 	.word	0x24000140

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24000028 	.word	0x24000028

080012d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_GetREVID+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0c1b      	lsrs	r3, r3, #16
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	5c001000 	.word	0x5c001000

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	4313      	orrs	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	05fa0000 	.word	0x05fa0000

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff40 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff33 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa4 	bl	8001444 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_GetCurrentCPUID+0x20>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001514:	2b70      	cmp	r3, #112	@ 0x70
 8001516:	d101      	bne.n	800151c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001518:	2303      	movs	r3, #3
 800151a:	e000      	b.n	800151e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800151c:	2301      	movs	r3, #1
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e00a      	b.n	800155e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	605a      	str	r2, [r3, #4]
      break;
 8001554:	e002      	b.n	800155c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
      break;
 800155a:	bf00      	nop
  }

  return status;
 800155c:	7dfb      	ldrb	r3, [r7, #23]
}
 800155e:	4618      	mov	r0, r3
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e003      	b.n	8001586 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001584:	2300      	movs	r3, #0
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0c1b      	lsrs	r3, r3, #16
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2201      	movs	r2, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80015b8:	f7ff ffa6 	bl	8001508 <HAL_GetCurrentCPUID>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d105      	bne.n	80015ce <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	011a      	lsls	r2, r3, #4
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_EXTI_IRQHandler+0x70>)
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e004      	b.n	80015d8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	011a      	lsls	r2, r3, #4
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_EXTI_IRQHandler+0x74>)
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4798      	blx	r3
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	58000088 	.word	0x58000088
 8001608:	580000c8 	.word	0x580000c8

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <HAL_GPIO_Init+0x234>)
 800161c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800161e:	e194      	b.n	800194a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8186 	beq.w	8001944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d005      	beq.n	8001650 <HAL_GPIO_Init+0x44>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d130      	bne.n	80016b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001686:	2201      	movs	r2, #1
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0201 	and.w	r2, r3, #1
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d017      	beq.n	80016ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d123      	bne.n	8001742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	69b9      	ldr	r1, [r7, #24]
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80e0 	beq.w	8001944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001784:	4b2f      	ldr	r3, [pc, #188]	@ (8001844 <HAL_GPIO_Init+0x238>)
 8001786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800178a:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <HAL_GPIO_Init+0x238>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <HAL_GPIO_Init+0x238>)
 8001796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_GPIO_Init+0x23c>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_GPIO_Init+0x240>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d052      	beq.n	8001874 <HAL_GPIO_Init+0x268>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001850 <HAL_GPIO_Init+0x244>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d031      	beq.n	800183a <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <HAL_GPIO_Init+0x248>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d02b      	beq.n	8001836 <HAL_GPIO_Init+0x22a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_GPIO_Init+0x24c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <HAL_GPIO_Init+0x250>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_GPIO_Init+0x254>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_GPIO_Init+0x258>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_GPIO_Init+0x25c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_GPIO_Init+0x260>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a17      	ldr	r2, [pc, #92]	@ (8001870 <HAL_GPIO_Init+0x264>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x20e>
 8001816:	2309      	movs	r3, #9
 8001818:	e02d      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800181a:	230a      	movs	r3, #10
 800181c:	e02b      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800181e:	2308      	movs	r3, #8
 8001820:	e029      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001822:	2307      	movs	r3, #7
 8001824:	e027      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001826:	2306      	movs	r3, #6
 8001828:	e025      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800182a:	2305      	movs	r3, #5
 800182c:	e023      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800182e:	2304      	movs	r3, #4
 8001830:	e021      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001832:	2303      	movs	r3, #3
 8001834:	e01f      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 8001836:	2302      	movs	r3, #2
 8001838:	e01d      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800183a:	2301      	movs	r3, #1
 800183c:	e01b      	b.n	8001876 <HAL_GPIO_Init+0x26a>
 800183e:	bf00      	nop
 8001840:	58000080 	.word	0x58000080
 8001844:	58024400 	.word	0x58024400
 8001848:	58000400 	.word	0x58000400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020400 	.word	0x58020400
 8001854:	58020800 	.word	0x58020800
 8001858:	58020c00 	.word	0x58020c00
 800185c:	58021000 	.word	0x58021000
 8001860:	58021400 	.word	0x58021400
 8001864:	58021800 	.word	0x58021800
 8001868:	58021c00 	.word	0x58021c00
 800186c:	58022000 	.word	0x58022000
 8001870:	58022400 	.word	0x58022400
 8001874:	2300      	movs	r3, #0
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001886:	4938      	ldr	r1, [pc, #224]	@ (8001968 <HAL_GPIO_Init+0x35c>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f ae63 	bne.w	8001620 <HAL_GPIO_Init+0x14>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	3724      	adds	r7, #36	@ 0x24
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58000400 	.word	0x58000400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80019a8:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_HSEM_FastTake+0x2c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3320      	adds	r3, #32
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_HSEM_FastTake+0x30>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	58026400 	.word	0x58026400
 80019d0:	80000300 	.word	0x80000300

080019d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019de:	4906      	ldr	r1, [pc, #24]	@ (80019f8 <HAL_HSEM_Release+0x24>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	58026400 	.word	0x58026400

080019fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a04:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d00a      	beq.n	8001a26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a10:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e040      	b.n	8001aa4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e03e      	b.n	8001aa4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a2e:	491f      	ldr	r1, [pc, #124]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a36:	f7ff fc1b 	bl	8001270 <HAL_GetTick>
 8001a3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a3c:	e009      	b.n	8001a52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a3e:	f7ff fc17 	bl	8001270 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a4c:	d901      	bls.n	8001a52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e028      	b.n	8001aa4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b1e      	cmp	r3, #30
 8001a64:	d008      	beq.n	8001a78 <HAL_PWREx_ConfigSupply+0x7c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a6a:	d005      	beq.n	8001a78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b1d      	cmp	r3, #29
 8001a70:	d002      	beq.n	8001a78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a76:	d114      	bne.n	8001aa2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a78:	f7ff fbfa 	bl	8001270 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a7e:	e009      	b.n	8001a94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a80:	f7ff fbf6 	bl	8001270 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a8e:	d901      	bls.n	8001a94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_PWREx_ConfigSupply+0xb0>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58024800 	.word	0x58024800

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	@ 0x30
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f000 bc48 	b.w	8002354 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8088 	beq.w	8001be2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b99      	ldr	r3, [pc, #612]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001adc:	4b96      	ldr	r3, [pc, #600]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x48>
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d111      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62>
 8001aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	4b8f      	ldr	r3, [pc, #572]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d06d      	beq.n	8001be0 <HAL_RCC_OscConfig+0x130>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d169      	bne.n	8001be0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f000 bc21 	b.w	8002354 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x7a>
 8001b1c:	4b86      	ldr	r3, [pc, #536]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a85      	ldr	r2, [pc, #532]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0xd8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x9c>
 8001b32:	4b81      	ldr	r3, [pc, #516]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a80      	ldr	r2, [pc, #512]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7d      	ldr	r2, [pc, #500]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xd8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0xc0>
 8001b56:	4b78      	ldr	r3, [pc, #480]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a77      	ldr	r2, [pc, #476]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a74      	ldr	r2, [pc, #464]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xd8>
 8001b70:	4b71      	ldr	r3, [pc, #452]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a70      	ldr	r2, [pc, #448]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6d      	ldr	r2, [pc, #436]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb6e 	bl	8001270 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb6a 	bl	8001270 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e3d4      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001baa:	4b63      	ldr	r3, [pc, #396]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe8>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fb5a 	bl	8001270 <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fb56 	bl	8001270 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	@ 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e3c0      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd2:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x110>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80ca 	beq.w	8001d84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf0:	4b51      	ldr	r3, [pc, #324]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_RCC_OscConfig+0x166>
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d156      	bne.n	8001cba <HAL_RCC_OscConfig+0x20a>
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d151      	bne.n	8001cba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c16:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x17e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e392      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c2e:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0219 	bic.w	r2, r3, #25
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	493f      	ldr	r1, [pc, #252]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb16 	bl	8001270 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb12 	bl	8001270 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e37c      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5a:	4b37      	ldr	r3, [pc, #220]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	f7ff fb33 	bl	80012d0 <HAL_GetREVID>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d817      	bhi.n	8001ca4 <HAL_RCC_OscConfig+0x1f4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d108      	bne.n	8001c8e <HAL_RCC_OscConfig+0x1de>
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c84:	4a2c      	ldr	r2, [pc, #176]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8c:	e07a      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	031b      	lsls	r3, r3, #12
 8001c9c:	4926      	ldr	r1, [pc, #152]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca2:	e06f      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4921      	ldr	r1, [pc, #132]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb8:	e064      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d047      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0219 	bic.w	r2, r3, #25
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	491a      	ldr	r1, [pc, #104]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff facc 	bl	8001270 <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fac8 	bl	8001270 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e332      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	f7ff fae9 	bl	80012d0 <HAL_GetREVID>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d819      	bhi.n	8001d3c <HAL_RCC_OscConfig+0x28c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b40      	cmp	r3, #64	@ 0x40
 8001d0e:	d108      	bne.n	8001d22 <HAL_RCC_OscConfig+0x272>
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d18:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1e:	6053      	str	r3, [r2, #4]
 8001d20:	e030      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	4901      	ldr	r1, [pc, #4]	@ (8001d38 <HAL_RCC_OscConfig+0x288>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
 8001d36:	e025      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	4997      	ldr	r1, [pc, #604]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b95      	ldr	r3, [pc, #596]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a94      	ldr	r2, [pc, #592]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fa87 	bl	8001270 <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fa83 	bl	8001270 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e2ed      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d78:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a9 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d9c:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d007      	beq.n	8001db8 <HAL_RCC_OscConfig+0x308>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b18      	cmp	r3, #24
 8001dac:	d13a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x374>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d135      	bne.n	8001e24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001db8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x320>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b80      	cmp	r3, #128	@ 0x80
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e2c1      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dd0:	f7ff fa7e 	bl	80012d0 <HAL_GetREVID>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d817      	bhi.n	8001e0e <HAL_RCC_OscConfig+0x35e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x348>
 8001de6:	4b70      	ldr	r3, [pc, #448]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dee:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001df4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001df6:	e075      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001df8:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	069b      	lsls	r3, r3, #26
 8001e06:	4968      	ldr	r1, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e0c:	e06a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e0e:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	4962      	ldr	r1, [pc, #392]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e22:	e05f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d042      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa1a 	bl	8001270 <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa16 	bl	8001270 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e280      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e52:	4b55      	ldr	r3, [pc, #340]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e5e:	f7ff fa37 	bl	80012d0 <HAL_GetREVID>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d817      	bhi.n	8001e9c <HAL_RCC_OscConfig+0x3ec>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d108      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3d6>
 8001e74:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e82:	6053      	str	r3, [r2, #4]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
 8001e86:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	069b      	lsls	r3, r3, #26
 8001e94:	4944      	ldr	r1, [pc, #272]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
 8001e9a:	e023      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
 8001e9c:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	493f      	ldr	r1, [pc, #252]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
 8001eb0:	e018      	b.n	8001ee4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f9d7 	bl	8001270 <HAL_GetTick>
 8001ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f9d3 	bl	8001270 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e23d      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ed8:	4b33      	ldr	r3, [pc, #204]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d036      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d019      	beq.n	8001f2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efc:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff f9b4 	bl	8001270 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f9b0 	bl	8001270 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e21a      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x45c>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f30:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f99a 	bl	8001270 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff f996 	bl	8001270 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e200      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d039      	beq.n	8001fde <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f977 	bl	8001270 <HAL_GetTick>
 8001f82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f86:	f7ff f973 	bl	8001270 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1dd      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_RCC_OscConfig+0x4f8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x4d6>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x52e>
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fac:	4b9b      	ldr	r3, [pc, #620]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a9a      	ldr	r2, [pc, #616]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f95a 	bl	8001270 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc0:	f7ff f956 	bl	8001270 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1c0      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd2:	4b92      	ldr	r3, [pc, #584]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8081 	beq.w	80020ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fec:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <HAL_RCC_OscConfig+0x770>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a8b      	ldr	r2, [pc, #556]	@ (8002220 <HAL_RCC_OscConfig+0x770>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff f93a 	bl	8001270 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002000:	f7ff f936 	bl	8001270 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1a0      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002012:	4b83      	ldr	r3, [pc, #524]	@ (8002220 <HAL_RCC_OscConfig+0x770>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x584>
 8002026:	4b7d      	ldr	r3, [pc, #500]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202a:	4a7c      	ldr	r2, [pc, #496]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6713      	str	r3, [r2, #112]	@ 0x70
 8002032:	e02d      	b.n	8002090 <HAL_RCC_OscConfig+0x5e0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x5a6>
 800203c:	4b77      	ldr	r3, [pc, #476]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4a76      	ldr	r2, [pc, #472]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	@ 0x70
 8002048:	4b74      	ldr	r3, [pc, #464]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a73      	ldr	r2, [pc, #460]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
 8002054:	e01c      	b.n	8002090 <HAL_RCC_OscConfig+0x5e0>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c8>
 800205e:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	@ 0x70
 800206a:	4b6c      	ldr	r3, [pc, #432]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	4a6b      	ldr	r2, [pc, #428]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	@ 0x70
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x5e0>
 8002078:	4b68      	ldr	r3, [pc, #416]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a67      	ldr	r2, [pc, #412]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	4b65      	ldr	r3, [pc, #404]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a64      	ldr	r2, [pc, #400]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff f8ea 	bl	8001270 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7ff f8e6 	bl	8001270 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e14e      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b6:	4b59      	ldr	r3, [pc, #356]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ee      	beq.n	80020a0 <HAL_RCC_OscConfig+0x5f0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f8d4 	bl	8001270 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f8d0 	bl	8001270 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e138      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020e2:	4b4e      	ldr	r3, [pc, #312]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ee      	bne.n	80020cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 812d 	beq.w	8002352 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020f8:	4b48      	ldr	r3, [pc, #288]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002100:	2b18      	cmp	r3, #24
 8002102:	f000 80bd 	beq.w	8002280 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2b02      	cmp	r3, #2
 800210c:	f040 809e 	bne.w	800224c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b42      	ldr	r3, [pc, #264]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a41      	ldr	r2, [pc, #260]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff f8a8 	bl	8001270 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f8a4 	bl	8001270 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e10e      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002136:	4b39      	ldr	r3, [pc, #228]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	4b36      	ldr	r3, [pc, #216]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002146:	4b37      	ldr	r3, [pc, #220]	@ (8002224 <HAL_RCC_OscConfig+0x774>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	430a      	orrs	r2, r1
 8002156:	4931      	ldr	r1, [pc, #196]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	628b      	str	r3, [r1, #40]	@ 0x28
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	3b01      	subs	r3, #1
 8002162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	3b01      	subs	r3, #1
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	b29b      	uxth	r3, r3
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	3b01      	subs	r3, #1
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	3b01      	subs	r3, #1
 8002186:	061b      	lsls	r3, r3, #24
 8002188:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800218c:	4923      	ldr	r1, [pc, #140]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	4a21      	ldr	r2, [pc, #132]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a2:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <HAL_RCC_OscConfig+0x778>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	491b      	ldr	r1, [pc, #108]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	f023 020c 	bic.w	r2, r3, #12
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	4917      	ldr	r1, [pc, #92]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	f023 0202 	bic.w	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021da:	4a10      	ldr	r2, [pc, #64]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021e2:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_RCC_OscConfig+0x76c>)
 800220c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f82d 	bl	8001270 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002218:	e011      	b.n	800223e <HAL_RCC_OscConfig+0x78e>
 800221a:	bf00      	nop
 800221c:	58024400 	.word	0x58024400
 8002220:	58024800 	.word	0x58024800
 8002224:	fffffc0c 	.word	0xfffffc0c
 8002228:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f820 	bl	8001270 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e08a      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x77c>
 800224a:	e082      	b.n	8002352 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a42      	ldr	r2, [pc, #264]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7ff f80a 	bl	8001270 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff f806 	bl	8001270 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e070      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x7b0>
 800227e:	e068      	b.n	8002352 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002280:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002286:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	2b01      	cmp	r3, #1
 8002292:	d031      	beq.n	80022f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d12a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0a5b      	lsrs	r3, r3, #9
 80022c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d108      	bne.n	80022f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0e1b      	lsrs	r3, r3, #24
 80022ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e02b      	b.n	8002354 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 80022fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d01f      	beq.n	8002352 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231e:	f7fe ffa7 	bl	8001270 <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002324:	bf00      	nop
 8002326:	f7fe ffa3 	bl	8001270 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	4293      	cmp	r3, r2
 8002330:	d0f9      	beq.n	8002326 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x8b0>)
 8002338:	4013      	ands	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800233e:	00d2      	lsls	r2, r2, #3
 8002340:	4906      	ldr	r1, [pc, #24]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_RCC_OscConfig+0x8ac>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3730      	adds	r7, #48	@ 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	ffff0007 	.word	0xffff0007

08002364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e19c      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b8a      	ldr	r3, [pc, #552]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b87      	ldr	r3, [pc, #540]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	4985      	ldr	r1, [pc, #532]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b83      	ldr	r3, [pc, #524]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e184      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b7b      	ldr	r3, [pc, #492]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d908      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c4:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4975      	ldr	r1, [pc, #468]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d010      	beq.n	8002404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d908      	bls.n	8002404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f2:	4b6d      	ldr	r3, [pc, #436]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	496a      	ldr	r1, [pc, #424]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002400:	4313      	orrs	r3, r2
 8002402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	4b64      	ldr	r3, [pc, #400]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800241c:	429a      	cmp	r2, r3
 800241e:	d908      	bls.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002420:	4b61      	ldr	r3, [pc, #388]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	495e      	ldr	r1, [pc, #376]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800242e:	4313      	orrs	r3, r2
 8002430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800244a:	429a      	cmp	r2, r3
 800244c:	d908      	bls.n	8002460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800244e:	4b56      	ldr	r3, [pc, #344]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4953      	ldr	r1, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800245c:	4313      	orrs	r3, r2
 800245e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	429a      	cmp	r2, r3
 800247a:	d908      	bls.n	800248e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 020f 	bic.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4947      	ldr	r1, [pc, #284]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d055      	beq.n	8002546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800249a:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4940      	ldr	r1, [pc, #256]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b4:	4b3c      	ldr	r3, [pc, #240]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d121      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0f6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024cc:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d115      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0ea      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e4:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0de      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f4:	4b2c      	ldr	r3, [pc, #176]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d6      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002504:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4925      	ldr	r1, [pc, #148]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002512:	4313      	orrs	r3, r2
 8002514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002516:	f7fe feab 	bl	8001270 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251c:	e00a      	b.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251e:	f7fe fea7 	bl	8001270 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0be      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	4b1c      	ldr	r3, [pc, #112]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	429a      	cmp	r2, r3
 8002544:	d1eb      	bne.n	800251e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f023 020f 	bic.w	r2, r3, #15
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	490e      	ldr	r1, [pc, #56]	@ (80025a8 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d214      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	4906      	ldr	r1, [pc, #24]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_RCC_ClockConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e086      	b.n	80026b2 <HAL_RCC_ClockConfig+0x34e>
 80025a4:	52002000 	.word	0x52002000
 80025a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d208      	bcs.n	80025da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b3c      	ldr	r3, [pc, #240]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4939      	ldr	r1, [pc, #228]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b34      	ldr	r3, [pc, #208]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d208      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	492e      	ldr	r1, [pc, #184]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d208      	bcs.n	8002636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4922      	ldr	r1, [pc, #136]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d208      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4917      	ldr	r1, [pc, #92]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002664:	f000 f834 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	4912      	ldr	r1, [pc, #72]	@ (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_RCC_ClockConfig+0x358>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <HAL_RCC_ClockConfig+0x35c>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x360>)
 800269a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800269c:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_RCC_ClockConfig+0x364>)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_RCC_ClockConfig+0x368>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fd98 	bl	80011dc <HAL_InitTick>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58024400 	.word	0x58024400
 80026c0:	08004d74 	.word	0x08004d74
 80026c4:	24000004 	.word	0x24000004
 80026c8:	24000000 	.word	0x24000000
 80026cc:	24000024 	.word	0x24000024

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bb3      	ldr	r3, [pc, #716]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026de:	2b18      	cmp	r3, #24
 80026e0:	f200 8155 	bhi.w	800298e <HAL_RCC_GetSysClockFreq+0x2be>
 80026e4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002751 	.word	0x08002751
 80026f0:	0800298f 	.word	0x0800298f
 80026f4:	0800298f 	.word	0x0800298f
 80026f8:	0800298f 	.word	0x0800298f
 80026fc:	0800298f 	.word	0x0800298f
 8002700:	0800298f 	.word	0x0800298f
 8002704:	0800298f 	.word	0x0800298f
 8002708:	0800298f 	.word	0x0800298f
 800270c:	08002777 	.word	0x08002777
 8002710:	0800298f 	.word	0x0800298f
 8002714:	0800298f 	.word	0x0800298f
 8002718:	0800298f 	.word	0x0800298f
 800271c:	0800298f 	.word	0x0800298f
 8002720:	0800298f 	.word	0x0800298f
 8002724:	0800298f 	.word	0x0800298f
 8002728:	0800298f 	.word	0x0800298f
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800298f 	.word	0x0800298f
 8002734:	0800298f 	.word	0x0800298f
 8002738:	0800298f 	.word	0x0800298f
 800273c:	0800298f 	.word	0x0800298f
 8002740:	0800298f 	.word	0x0800298f
 8002744:	0800298f 	.word	0x0800298f
 8002748:	0800298f 	.word	0x0800298f
 800274c:	08002783 	.word	0x08002783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002750:	4b94      	ldr	r3, [pc, #592]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800275c:	4b91      	ldr	r3, [pc, #580]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	4a90      	ldr	r2, [pc, #576]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800276e:	e111      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002770:	4b8d      	ldr	r3, [pc, #564]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002772:	61bb      	str	r3, [r7, #24]
      break;
 8002774:	e10e      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002776:	4b8d      	ldr	r3, [pc, #564]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002778:	61bb      	str	r3, [r7, #24]
      break;
 800277a:	e10b      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800277c:	4b8c      	ldr	r3, [pc, #560]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800277e:	61bb      	str	r3, [r7, #24]
      break;
 8002780:	e108      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800278c:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002798:	4b82      	ldr	r3, [pc, #520]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027a2:	4b80      	ldr	r3, [pc, #512]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	08db      	lsrs	r3, r3, #3
 80027a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80e1 	beq.w	8002988 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	f000 8083 	beq.w	80028d4 <HAL_RCC_GetSysClockFreq+0x204>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f200 80a1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x248>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x114>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d056      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027e2:	e099      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027f0:	4b6c      	ldr	r3, [pc, #432]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	4a6b      	ldr	r2, [pc, #428]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281a:	4b62      	ldr	r3, [pc, #392]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282a:	ed97 6a02 	vldr	s12, [r7, #8]
 800282e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800283e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800284a:	e087      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80029b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800285a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285e:	4b51      	ldr	r3, [pc, #324]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002872:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800287a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800288e:	e065      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a2:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028d2:	e043      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80029c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e6:	4b2f      	ldr	r3, [pc, #188]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002916:	e021      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80029bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80029b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	0a5b      	lsrs	r3, r3, #9
 8002962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002966:	3301      	adds	r3, #1
 8002968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002974:	edd7 6a07 	vldr	s13, [r7, #28]
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002980:	ee17 3a90 	vmov	r3, s15
 8002984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002986:	e005      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800298e:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002990:	61bb      	str	r3, [r7, #24]
      break;
 8002992:	bf00      	nop
  }

  return sysclockfreq;
 8002994:	69bb      	ldr	r3, [r7, #24]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	03d09000 	.word	0x03d09000
 80029ac:	003d0900 	.word	0x003d0900
 80029b0:	017d7840 	.word	0x017d7840
 80029b4:	46000000 	.word	0x46000000
 80029b8:	4c742400 	.word	0x4c742400
 80029bc:	4a742400 	.word	0x4a742400
 80029c0:	4bbebc20 	.word	0x4bbebc20

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029ca:	f7ff fe81 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x50>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	4a09      	ldr	r2, [pc, #36]	@ (8002a18 <HAL_RCC_GetHCLKFreq+0x54>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a07      	ldr	r2, [pc, #28]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a02:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58024400 	.word	0x58024400
 8002a18:	08004d74 	.word	0x08004d74
 8002a1c:	24000004 	.word	0x24000004
 8002a20:	24000000 	.word	0x24000000

08002a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a28:	f7ff ffcc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4904      	ldr	r1, [pc, #16]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	08004d74 	.word	0x08004d74

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a54:	f7ff ffb6 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4904      	ldr	r1, [pc, #16]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58024400 	.word	0x58024400
 8002a78:	08004d74 	.word	0x08004d74

08002a7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002a80:	f7ff ffa0 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4904      	ldr	r1, [pc, #16]	@ (8002aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	08004d74 	.word	0x08004d74

08002aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ab0:	4ba1      	ldr	r3, [pc, #644]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002aba:	4b9f      	ldr	r3, [pc, #636]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	0b1b      	lsrs	r3, r3, #12
 8002ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002ad2:	4b99      	ldr	r3, [pc, #612]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8111 	beq.w	8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f000 8083 	beq.w	8002c04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	f200 80a1 	bhi.w	8002c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d056      	beq.n	8002bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002b12:	e099      	b.n	8002c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b14:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02d      	beq.n	8002b7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b20:	4b85      	ldr	r3, [pc, #532]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	4a84      	ldr	r2, [pc, #528]	@ (8002d3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b7a:	e087      	b.n	8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002d44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ba2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bbe:	e065      	b.n	8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd2:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002be6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c02:	e043      	b.n	8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c16:	4b48      	ldr	r3, [pc, #288]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c46:	e021      	b.n	8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002d40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	0a5b      	lsrs	r3, r3, #9
 8002c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb2:	ee17 2a90 	vmov	r2, s15
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce0:	ee17 2a90 	vmov	r2, s15
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 2a90 	vmov	r2, s15
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002d16:	e008      	b.n	8002d2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
}
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	03d09000 	.word	0x03d09000
 8002d40:	46000000 	.word	0x46000000
 8002d44:	4c742400 	.word	0x4c742400
 8002d48:	4a742400 	.word	0x4a742400
 8002d4c:	4bbebc20 	.word	0x4bbebc20

08002d50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	@ 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d58:	4ba1      	ldr	r3, [pc, #644]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002d62:	4b9f      	ldr	r3, [pc, #636]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	0d1b      	lsrs	r3, r3, #20
 8002d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002d7a:	4b99      	ldr	r3, [pc, #612]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8111 	beq.w	8002fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f000 8083 	beq.w	8002eac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	f200 80a1 	bhi.w	8002ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d056      	beq.n	8002e68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002dba:	e099      	b.n	8002ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dbc:	4b88      	ldr	r3, [pc, #544]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02d      	beq.n	8002e24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dc8:	4b85      	ldr	r3, [pc, #532]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	4a84      	ldr	r2, [pc, #528]	@ (8002fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002e22:	e087      	b.n	8002f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002fec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e36:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e66:	e065      	b.n	8002f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7a:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eaa:	e043      	b.n	8002f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ebe:	4b48      	ldr	r3, [pc, #288]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ed2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eee:	e021      	b.n	8002f34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f02:	4b37      	ldr	r3, [pc, #220]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	0a5b      	lsrs	r3, r3, #9
 8002f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f5a:	ee17 2a90 	vmov	r2, s15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f88:	ee17 2a90 	vmov	r2, s15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	0e1b      	lsrs	r3, r3, #24
 8002f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb6:	ee17 2a90 	vmov	r2, s15
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	03d09000 	.word	0x03d09000
 8002fe8:	46000000 	.word	0x46000000
 8002fec:	4c742400 	.word	0x4c742400
 8002ff0:	4a742400 	.word	0x4a742400
 8002ff4:	4bbebc20 	.word	0x4bbebc20

08002ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e049      	b.n	800309e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fdfc 	bl	8000c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fa58 	bl	80034ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x24>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e03c      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x3e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e02f      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x58>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e022      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d109      	bne.n	800311a <HAL_TIM_PWM_Start+0x72>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e015      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d109      	bne.n	8003134 <HAL_TIM_PWM_Start+0x8c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0a1      	b.n	8003292 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0xb6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800315c:	e023      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xc6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800316c:	e01b      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xd6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800317c:	e013      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0xe6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b10      	cmp	r3, #16
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0xf6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800319c:	e003      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fd12 	bl	8003bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a38      	ldr	r2, [pc, #224]	@ (800329c <HAL_TIM_PWM_Start+0x1f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x13e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <HAL_TIM_PWM_Start+0x1f8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x13e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_TIM_PWM_Start+0x1fc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x13e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a34      	ldr	r2, [pc, #208]	@ (80032a8 <HAL_TIM_PWM_Start+0x200>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIM_PWM_Start+0x13e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a32      	ldr	r2, [pc, #200]	@ (80032ac <HAL_TIM_PWM_Start+0x204>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_Start+0x142>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_TIM_PWM_Start+0x144>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a25      	ldr	r2, [pc, #148]	@ (800329c <HAL_TIM_PWM_Start+0x1f4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003212:	d01d      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a25      	ldr	r2, [pc, #148]	@ (80032b0 <HAL_TIM_PWM_Start+0x208>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a24      	ldr	r2, [pc, #144]	@ (80032b4 <HAL_TIM_PWM_Start+0x20c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_TIM_PWM_Start+0x210>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1a      	ldr	r2, [pc, #104]	@ (80032a0 <HAL_TIM_PWM_Start+0x1f8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_TIM_PWM_Start+0x214>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1a8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a16      	ldr	r2, [pc, #88]	@ (80032a4 <HAL_TIM_PWM_Start+0x1fc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d115      	bne.n	800327c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_TIM_PWM_Start+0x218>)
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d015      	beq.n	800328e <HAL_TIM_PWM_Start+0x1e6>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d011      	beq.n	800328e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	e008      	b.n	800328e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e000      	b.n	8003290 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000
 80032a0:	40010400 	.word	0x40010400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40014400 	.word	0x40014400
 80032ac:	40014800 	.word	0x40014800
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40001800 	.word	0x40001800
 80032c0:	00010007 	.word	0x00010007

080032c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0ff      	b.n	80034e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b14      	cmp	r3, #20
 80032ee:	f200 80f0 	bhi.w	80034d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032f2:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800334d 	.word	0x0800334d
 80032fc:	080034d3 	.word	0x080034d3
 8003300:	080034d3 	.word	0x080034d3
 8003304:	080034d3 	.word	0x080034d3
 8003308:	0800338d 	.word	0x0800338d
 800330c:	080034d3 	.word	0x080034d3
 8003310:	080034d3 	.word	0x080034d3
 8003314:	080034d3 	.word	0x080034d3
 8003318:	080033cf 	.word	0x080033cf
 800331c:	080034d3 	.word	0x080034d3
 8003320:	080034d3 	.word	0x080034d3
 8003324:	080034d3 	.word	0x080034d3
 8003328:	0800340f 	.word	0x0800340f
 800332c:	080034d3 	.word	0x080034d3
 8003330:	080034d3 	.word	0x080034d3
 8003334:	080034d3 	.word	0x080034d3
 8003338:	08003451 	.word	0x08003451
 800333c:	080034d3 	.word	0x080034d3
 8003340:	080034d3 	.word	0x080034d3
 8003344:	080034d3 	.word	0x080034d3
 8003348:	08003491 	.word	0x08003491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f96a 	bl	800362c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	619a      	str	r2, [r3, #24]
      break;
 800338a:	e0a5      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f9da 	bl	800374c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      break;
 80033cc:	e084      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fa43 	bl	8003860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0208 	orr.w	r2, r2, #8
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0204 	bic.w	r2, r2, #4
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
      break;
 800340c:	e064      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 faab 	bl	8003970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69d9      	ldr	r1, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	61da      	str	r2, [r3, #28]
      break;
 800344e:	e043      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 faf4 	bl	8003a44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800348e:	e023      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fb38 	bl	8003b0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034d0:	e002      	b.n	80034d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
      break;
 80034d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop

080034ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a43      	ldr	r2, [pc, #268]	@ (800360c <TIM_Base_SetConfig+0x120>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d00f      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a40      	ldr	r2, [pc, #256]	@ (8003610 <TIM_Base_SetConfig+0x124>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00b      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3f      	ldr	r2, [pc, #252]	@ (8003614 <TIM_Base_SetConfig+0x128>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3e      	ldr	r2, [pc, #248]	@ (8003618 <TIM_Base_SetConfig+0x12c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3d      	ldr	r2, [pc, #244]	@ (800361c <TIM_Base_SetConfig+0x130>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d108      	bne.n	800353e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a32      	ldr	r2, [pc, #200]	@ (800360c <TIM_Base_SetConfig+0x120>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2f      	ldr	r2, [pc, #188]	@ (8003610 <TIM_Base_SetConfig+0x124>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2e      	ldr	r2, [pc, #184]	@ (8003614 <TIM_Base_SetConfig+0x128>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2d      	ldr	r2, [pc, #180]	@ (8003618 <TIM_Base_SetConfig+0x12c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	@ (800361c <TIM_Base_SetConfig+0x130>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	@ (8003620 <TIM_Base_SetConfig+0x134>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2a      	ldr	r2, [pc, #168]	@ (8003624 <TIM_Base_SetConfig+0x138>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a29      	ldr	r2, [pc, #164]	@ (8003628 <TIM_Base_SetConfig+0x13c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <TIM_Base_SetConfig+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <TIM_Base_SetConfig+0xf2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <TIM_Base_SetConfig+0x130>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0xf2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a15      	ldr	r2, [pc, #84]	@ (8003620 <TIM_Base_SetConfig+0x134>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0xf2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <TIM_Base_SetConfig+0x138>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0xf2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a13      	ldr	r2, [pc, #76]	@ (8003628 <TIM_Base_SetConfig+0x13c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d103      	bne.n	80035e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40010400 	.word	0x40010400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800

0800362c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 0201 	bic.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <TIM_OC1_SetConfig+0x108>)
 8003658:	4013      	ands	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0302 	bic.w	r3, r3, #2
 8003674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <TIM_OC1_SetConfig+0x10c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_OC1_SetConfig+0x7c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2c      	ldr	r2, [pc, #176]	@ (800373c <TIM_OC1_SetConfig+0x110>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_OC1_SetConfig+0x7c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <TIM_OC1_SetConfig+0x114>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_OC1_SetConfig+0x7c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <TIM_OC1_SetConfig+0x118>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC1_SetConfig+0x7c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a29      	ldr	r2, [pc, #164]	@ (8003748 <TIM_OC1_SetConfig+0x11c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0308 	bic.w	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <TIM_OC1_SetConfig+0x10c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_OC1_SetConfig+0xbe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <TIM_OC1_SetConfig+0x110>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_OC1_SetConfig+0xbe>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <TIM_OC1_SetConfig+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_OC1_SetConfig+0xbe>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <TIM_OC1_SetConfig+0x118>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_OC1_SetConfig+0xbe>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a18      	ldr	r2, [pc, #96]	@ (8003748 <TIM_OC1_SetConfig+0x11c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	fffeff8f 	.word	0xfffeff8f
 8003738:	40010000 	.word	0x40010000
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800

0800374c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 0210 	bic.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <TIM_OC2_SetConfig+0xfc>)
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0320 	bic.w	r3, r3, #32
 8003796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a29      	ldr	r2, [pc, #164]	@ (800384c <TIM_OC2_SetConfig+0x100>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC2_SetConfig+0x68>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <TIM_OC2_SetConfig+0x104>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10d      	bne.n	80037d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1e      	ldr	r2, [pc, #120]	@ (800384c <TIM_OC2_SetConfig+0x100>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00f      	beq.n	80037f8 <TIM_OC2_SetConfig+0xac>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a1d      	ldr	r2, [pc, #116]	@ (8003850 <TIM_OC2_SetConfig+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_OC2_SetConfig+0xac>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <TIM_OC2_SetConfig+0x108>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <TIM_OC2_SetConfig+0xac>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <TIM_OC2_SetConfig+0x10c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0xac>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1a      	ldr	r2, [pc, #104]	@ (800385c <TIM_OC2_SetConfig+0x110>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d113      	bne.n	8003820 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	feff8fff 	.word	0xfeff8fff
 800384c:	40010000 	.word	0x40010000
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4b33      	ldr	r3, [pc, #204]	@ (8003958 <TIM_OC3_SetConfig+0xf8>)
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a28      	ldr	r2, [pc, #160]	@ (800395c <TIM_OC3_SetConfig+0xfc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC3_SetConfig+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a27      	ldr	r2, [pc, #156]	@ (8003960 <TIM_OC3_SetConfig+0x100>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC3_SetConfig+0xfc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_OC3_SetConfig+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003960 <TIM_OC3_SetConfig+0x100>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_OC3_SetConfig+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <TIM_OC3_SetConfig+0x104>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_OC3_SetConfig+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <TIM_OC3_SetConfig+0x108>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a19      	ldr	r2, [pc, #100]	@ (800396c <TIM_OC3_SetConfig+0x10c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	fffeff8f 	.word	0xfffeff8f
 800395c:	40010000 	.word	0x40010000
 8003960:	40010400 	.word	0x40010400
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800

08003970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <TIM_OC4_SetConfig+0xbc>)
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a19      	ldr	r2, [pc, #100]	@ (8003a30 <TIM_OC4_SetConfig+0xc0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00f      	beq.n	80039f0 <TIM_OC4_SetConfig+0x80>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <TIM_OC4_SetConfig+0xc4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <TIM_OC4_SetConfig+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <TIM_OC4_SetConfig+0xc8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_OC4_SetConfig+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <TIM_OC4_SetConfig+0xcc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC4_SetConfig+0x80>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <TIM_OC4_SetConfig+0xd0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d109      	bne.n	8003a04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	019b      	lsls	r3, r3, #6
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	feff8fff 	.word	0xfeff8fff
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800

08003a44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4b21      	ldr	r3, [pc, #132]	@ (8003af4 <TIM_OC5_SetConfig+0xb0>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <TIM_OC5_SetConfig+0xb4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_OC5_SetConfig+0x76>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <TIM_OC5_SetConfig+0xb8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_OC5_SetConfig+0x76>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a16      	ldr	r2, [pc, #88]	@ (8003b00 <TIM_OC5_SetConfig+0xbc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_OC5_SetConfig+0x76>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <TIM_OC5_SetConfig+0xc0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC5_SetConfig+0x76>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <TIM_OC5_SetConfig+0xc4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d109      	bne.n	8003ace <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	fffeff8f 	.word	0xfffeff8f
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40010400 	.word	0x40010400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800

08003b0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <TIM_OC6_SetConfig+0xb4>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	051b      	lsls	r3, r3, #20
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <TIM_OC6_SetConfig+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00f      	beq.n	8003b84 <TIM_OC6_SetConfig+0x78>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <TIM_OC6_SetConfig+0xbc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_OC6_SetConfig+0x78>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <TIM_OC6_SetConfig+0xc0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_OC6_SetConfig+0x78>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a16      	ldr	r2, [pc, #88]	@ (8003bd0 <TIM_OC6_SetConfig+0xc4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_OC6_SetConfig+0x78>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <TIM_OC6_SetConfig+0xc8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d109      	bne.n	8003b98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	feff8fff 	.word	0xfeff8fff
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40010400 	.word	0x40010400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2201      	movs	r2, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e06d      	b.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a30      	ldr	r2, [pc, #192]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cae:	d01d      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10c      	bne.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	40014000 	.word	0x40014000

08003d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e042      	b.n	8003dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f83b 	bl	8003de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2224      	movs	r2, #36	@ 0x24
 8003d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fd9a 	bl	80048c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f82f 	bl	8003df4 <UART_SetConfig>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e01b      	b.n	8003dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fe19 	bl	8004a08 <UART_CheckIdleState>
 8003dd6:	4603      	mov	r3, r0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b092      	sub	sp, #72	@ 0x48
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4bbe      	ldr	r3, [pc, #760]	@ (800411c <UART_SetConfig+0x328>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4ab3      	ldr	r2, [pc, #716]	@ (8004120 <UART_SetConfig+0x32c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	4baf      	ldr	r3, [pc, #700]	@ (8004124 <UART_SetConfig+0x330>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	f023 010f 	bic.w	r1, r3, #15
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4aa6      	ldr	r2, [pc, #664]	@ (8004128 <UART_SetConfig+0x334>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d177      	bne.n	8003f84 <UART_SetConfig+0x190>
 8003e94:	4ba5      	ldr	r3, [pc, #660]	@ (800412c <UART_SetConfig+0x338>)
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e9c:	2b28      	cmp	r3, #40	@ 0x28
 8003e9e:	d86d      	bhi.n	8003f7c <UART_SetConfig+0x188>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <UART_SetConfig+0xb4>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003f4d 	.word	0x08003f4d
 8003eac:	08003f7d 	.word	0x08003f7d
 8003eb0:	08003f7d 	.word	0x08003f7d
 8003eb4:	08003f7d 	.word	0x08003f7d
 8003eb8:	08003f7d 	.word	0x08003f7d
 8003ebc:	08003f7d 	.word	0x08003f7d
 8003ec0:	08003f7d 	.word	0x08003f7d
 8003ec4:	08003f7d 	.word	0x08003f7d
 8003ec8:	08003f55 	.word	0x08003f55
 8003ecc:	08003f7d 	.word	0x08003f7d
 8003ed0:	08003f7d 	.word	0x08003f7d
 8003ed4:	08003f7d 	.word	0x08003f7d
 8003ed8:	08003f7d 	.word	0x08003f7d
 8003edc:	08003f7d 	.word	0x08003f7d
 8003ee0:	08003f7d 	.word	0x08003f7d
 8003ee4:	08003f7d 	.word	0x08003f7d
 8003ee8:	08003f5d 	.word	0x08003f5d
 8003eec:	08003f7d 	.word	0x08003f7d
 8003ef0:	08003f7d 	.word	0x08003f7d
 8003ef4:	08003f7d 	.word	0x08003f7d
 8003ef8:	08003f7d 	.word	0x08003f7d
 8003efc:	08003f7d 	.word	0x08003f7d
 8003f00:	08003f7d 	.word	0x08003f7d
 8003f04:	08003f7d 	.word	0x08003f7d
 8003f08:	08003f65 	.word	0x08003f65
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	08003f7d 	.word	0x08003f7d
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f7d 	.word	0x08003f7d
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f7d 	.word	0x08003f7d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f52:	e222      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f54:	2304      	movs	r3, #4
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f5a:	e21e      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f62:	e21a      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f64:	2310      	movs	r3, #16
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f6a:	e216      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f72:	e212      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f74:	2340      	movs	r3, #64	@ 0x40
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f7a:	e20e      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f82:	e20a      	b.n	800439a <UART_SetConfig+0x5a6>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a69      	ldr	r2, [pc, #420]	@ (8004130 <UART_SetConfig+0x33c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d130      	bne.n	8003ff0 <UART_SetConfig+0x1fc>
 8003f8e:	4b67      	ldr	r3, [pc, #412]	@ (800412c <UART_SetConfig+0x338>)
 8003f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d826      	bhi.n	8003fe8 <UART_SetConfig+0x1f4>
 8003f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x1ac>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fb9 	.word	0x08003fb9
 8003fa4:	08003fc1 	.word	0x08003fc1
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fbe:	e1ec      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fc6:	e1e8      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fce:	e1e4      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fd6:	e1e0      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fde:	e1dc      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fe0:	2340      	movs	r3, #64	@ 0x40
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fe6:	e1d8      	b.n	800439a <UART_SetConfig+0x5a6>
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003fee:	e1d4      	b.n	800439a <UART_SetConfig+0x5a6>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8004134 <UART_SetConfig+0x340>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d130      	bne.n	800405c <UART_SetConfig+0x268>
 8003ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800412c <UART_SetConfig+0x338>)
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	2b05      	cmp	r3, #5
 8004004:	d826      	bhi.n	8004054 <UART_SetConfig+0x260>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <UART_SetConfig+0x218>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004025 	.word	0x08004025
 8004010:	0800402d 	.word	0x0800402d
 8004014:	08004035 	.word	0x08004035
 8004018:	0800403d 	.word	0x0800403d
 800401c:	08004045 	.word	0x08004045
 8004020:	0800404d 	.word	0x0800404d
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800402a:	e1b6      	b.n	800439a <UART_SetConfig+0x5a6>
 800402c:	2304      	movs	r3, #4
 800402e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004032:	e1b2      	b.n	800439a <UART_SetConfig+0x5a6>
 8004034:	2308      	movs	r3, #8
 8004036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800403a:	e1ae      	b.n	800439a <UART_SetConfig+0x5a6>
 800403c:	2310      	movs	r3, #16
 800403e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004042:	e1aa      	b.n	800439a <UART_SetConfig+0x5a6>
 8004044:	2320      	movs	r3, #32
 8004046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800404a:	e1a6      	b.n	800439a <UART_SetConfig+0x5a6>
 800404c:	2340      	movs	r3, #64	@ 0x40
 800404e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004052:	e1a2      	b.n	800439a <UART_SetConfig+0x5a6>
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800405a:	e19e      	b.n	800439a <UART_SetConfig+0x5a6>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	@ (8004138 <UART_SetConfig+0x344>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d130      	bne.n	80040c8 <UART_SetConfig+0x2d4>
 8004066:	4b31      	ldr	r3, [pc, #196]	@ (800412c <UART_SetConfig+0x338>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b05      	cmp	r3, #5
 8004070:	d826      	bhi.n	80040c0 <UART_SetConfig+0x2cc>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <UART_SetConfig+0x284>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	08004091 	.word	0x08004091
 800407c:	08004099 	.word	0x08004099
 8004080:	080040a1 	.word	0x080040a1
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040b1 	.word	0x080040b1
 800408c:	080040b9 	.word	0x080040b9
 8004090:	2300      	movs	r3, #0
 8004092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004096:	e180      	b.n	800439a <UART_SetConfig+0x5a6>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800409e:	e17c      	b.n	800439a <UART_SetConfig+0x5a6>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040a6:	e178      	b.n	800439a <UART_SetConfig+0x5a6>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ae:	e174      	b.n	800439a <UART_SetConfig+0x5a6>
 80040b0:	2320      	movs	r3, #32
 80040b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040b6:	e170      	b.n	800439a <UART_SetConfig+0x5a6>
 80040b8:	2340      	movs	r3, #64	@ 0x40
 80040ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040be:	e16c      	b.n	800439a <UART_SetConfig+0x5a6>
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040c6:	e168      	b.n	800439a <UART_SetConfig+0x5a6>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	@ (800413c <UART_SetConfig+0x348>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d142      	bne.n	8004158 <UART_SetConfig+0x364>
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <UART_SetConfig+0x338>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d838      	bhi.n	8004150 <UART_SetConfig+0x35c>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <UART_SetConfig+0x2f0>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040fd 	.word	0x080040fd
 80040e8:	08004105 	.word	0x08004105
 80040ec:	0800410d 	.word	0x0800410d
 80040f0:	08004115 	.word	0x08004115
 80040f4:	08004141 	.word	0x08004141
 80040f8:	08004149 	.word	0x08004149
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004102:	e14a      	b.n	800439a <UART_SetConfig+0x5a6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800410a:	e146      	b.n	800439a <UART_SetConfig+0x5a6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004112:	e142      	b.n	800439a <UART_SetConfig+0x5a6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800411a:	e13e      	b.n	800439a <UART_SetConfig+0x5a6>
 800411c:	cfff69f3 	.word	0xcfff69f3
 8004120:	58000c00 	.word	0x58000c00
 8004124:	11fff4ff 	.word	0x11fff4ff
 8004128:	40011000 	.word	0x40011000
 800412c:	58024400 	.word	0x58024400
 8004130:	40004400 	.word	0x40004400
 8004134:	40004800 	.word	0x40004800
 8004138:	40004c00 	.word	0x40004c00
 800413c:	40005000 	.word	0x40005000
 8004140:	2320      	movs	r3, #32
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004146:	e128      	b.n	800439a <UART_SetConfig+0x5a6>
 8004148:	2340      	movs	r3, #64	@ 0x40
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800414e:	e124      	b.n	800439a <UART_SetConfig+0x5a6>
 8004150:	2380      	movs	r3, #128	@ 0x80
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004156:	e120      	b.n	800439a <UART_SetConfig+0x5a6>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4acb      	ldr	r2, [pc, #812]	@ (800448c <UART_SetConfig+0x698>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d176      	bne.n	8004250 <UART_SetConfig+0x45c>
 8004162:	4bcb      	ldr	r3, [pc, #812]	@ (8004490 <UART_SetConfig+0x69c>)
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800416a:	2b28      	cmp	r3, #40	@ 0x28
 800416c:	d86c      	bhi.n	8004248 <UART_SetConfig+0x454>
 800416e:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <UART_SetConfig+0x380>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004219 	.word	0x08004219
 8004178:	08004249 	.word	0x08004249
 800417c:	08004249 	.word	0x08004249
 8004180:	08004249 	.word	0x08004249
 8004184:	08004249 	.word	0x08004249
 8004188:	08004249 	.word	0x08004249
 800418c:	08004249 	.word	0x08004249
 8004190:	08004249 	.word	0x08004249
 8004194:	08004221 	.word	0x08004221
 8004198:	08004249 	.word	0x08004249
 800419c:	08004249 	.word	0x08004249
 80041a0:	08004249 	.word	0x08004249
 80041a4:	08004249 	.word	0x08004249
 80041a8:	08004249 	.word	0x08004249
 80041ac:	08004249 	.word	0x08004249
 80041b0:	08004249 	.word	0x08004249
 80041b4:	08004229 	.word	0x08004229
 80041b8:	08004249 	.word	0x08004249
 80041bc:	08004249 	.word	0x08004249
 80041c0:	08004249 	.word	0x08004249
 80041c4:	08004249 	.word	0x08004249
 80041c8:	08004249 	.word	0x08004249
 80041cc:	08004249 	.word	0x08004249
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004231 	.word	0x08004231
 80041d8:	08004249 	.word	0x08004249
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004249 	.word	0x08004249
 80041e4:	08004249 	.word	0x08004249
 80041e8:	08004249 	.word	0x08004249
 80041ec:	08004249 	.word	0x08004249
 80041f0:	08004249 	.word	0x08004249
 80041f4:	08004239 	.word	0x08004239
 80041f8:	08004249 	.word	0x08004249
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004249 	.word	0x08004249
 8004204:	08004249 	.word	0x08004249
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
 8004214:	08004241 	.word	0x08004241
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800421e:	e0bc      	b.n	800439a <UART_SetConfig+0x5a6>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004226:	e0b8      	b.n	800439a <UART_SetConfig+0x5a6>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800422e:	e0b4      	b.n	800439a <UART_SetConfig+0x5a6>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004236:	e0b0      	b.n	800439a <UART_SetConfig+0x5a6>
 8004238:	2320      	movs	r3, #32
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800423e:	e0ac      	b.n	800439a <UART_SetConfig+0x5a6>
 8004240:	2340      	movs	r3, #64	@ 0x40
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004246:	e0a8      	b.n	800439a <UART_SetConfig+0x5a6>
 8004248:	2380      	movs	r3, #128	@ 0x80
 800424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800424e:	e0a4      	b.n	800439a <UART_SetConfig+0x5a6>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a8f      	ldr	r2, [pc, #572]	@ (8004494 <UART_SetConfig+0x6a0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d130      	bne.n	80042bc <UART_SetConfig+0x4c8>
 800425a:	4b8d      	ldr	r3, [pc, #564]	@ (8004490 <UART_SetConfig+0x69c>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	2b05      	cmp	r3, #5
 8004264:	d826      	bhi.n	80042b4 <UART_SetConfig+0x4c0>
 8004266:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <UART_SetConfig+0x478>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	08004285 	.word	0x08004285
 8004270:	0800428d 	.word	0x0800428d
 8004274:	08004295 	.word	0x08004295
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042ad 	.word	0x080042ad
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800428a:	e086      	b.n	800439a <UART_SetConfig+0x5a6>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004292:	e082      	b.n	800439a <UART_SetConfig+0x5a6>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800429a:	e07e      	b.n	800439a <UART_SetConfig+0x5a6>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042a2:	e07a      	b.n	800439a <UART_SetConfig+0x5a6>
 80042a4:	2320      	movs	r3, #32
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042aa:	e076      	b.n	800439a <UART_SetConfig+0x5a6>
 80042ac:	2340      	movs	r3, #64	@ 0x40
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042b2:	e072      	b.n	800439a <UART_SetConfig+0x5a6>
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ba:	e06e      	b.n	800439a <UART_SetConfig+0x5a6>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a75      	ldr	r2, [pc, #468]	@ (8004498 <UART_SetConfig+0x6a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d130      	bne.n	8004328 <UART_SetConfig+0x534>
 80042c6:	4b72      	ldr	r3, [pc, #456]	@ (8004490 <UART_SetConfig+0x69c>)
 80042c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d826      	bhi.n	8004320 <UART_SetConfig+0x52c>
 80042d2:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <UART_SetConfig+0x4e4>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	080042f1 	.word	0x080042f1
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	08004301 	.word	0x08004301
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004319 	.word	0x08004319
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f6:	e050      	b.n	800439a <UART_SetConfig+0x5a6>
 80042f8:	2304      	movs	r3, #4
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fe:	e04c      	b.n	800439a <UART_SetConfig+0x5a6>
 8004300:	2308      	movs	r3, #8
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004306:	e048      	b.n	800439a <UART_SetConfig+0x5a6>
 8004308:	2310      	movs	r3, #16
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800430e:	e044      	b.n	800439a <UART_SetConfig+0x5a6>
 8004310:	2320      	movs	r3, #32
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004316:	e040      	b.n	800439a <UART_SetConfig+0x5a6>
 8004318:	2340      	movs	r3, #64	@ 0x40
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800431e:	e03c      	b.n	800439a <UART_SetConfig+0x5a6>
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004326:	e038      	b.n	800439a <UART_SetConfig+0x5a6>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a5b      	ldr	r2, [pc, #364]	@ (800449c <UART_SetConfig+0x6a8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d130      	bne.n	8004394 <UART_SetConfig+0x5a0>
 8004332:	4b57      	ldr	r3, [pc, #348]	@ (8004490 <UART_SetConfig+0x69c>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b05      	cmp	r3, #5
 800433c:	d826      	bhi.n	800438c <UART_SetConfig+0x598>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0x550>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	0800435d 	.word	0x0800435d
 8004348:	08004365 	.word	0x08004365
 800434c:	0800436d 	.word	0x0800436d
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004385 	.word	0x08004385
 800435c:	2302      	movs	r3, #2
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e01a      	b.n	800439a <UART_SetConfig+0x5a6>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436a:	e016      	b.n	800439a <UART_SetConfig+0x5a6>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004372:	e012      	b.n	800439a <UART_SetConfig+0x5a6>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800437a:	e00e      	b.n	800439a <UART_SetConfig+0x5a6>
 800437c:	2320      	movs	r3, #32
 800437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004382:	e00a      	b.n	800439a <UART_SetConfig+0x5a6>
 8004384:	2340      	movs	r3, #64	@ 0x40
 8004386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800438a:	e006      	b.n	800439a <UART_SetConfig+0x5a6>
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004392:	e002      	b.n	800439a <UART_SetConfig+0x5a6>
 8004394:	2380      	movs	r3, #128	@ 0x80
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a3f      	ldr	r2, [pc, #252]	@ (800449c <UART_SetConfig+0x6a8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	f040 80f8 	bne.w	8004596 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	dc46      	bgt.n	800443c <UART_SetConfig+0x648>
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	f2c0 8082 	blt.w	80044b8 <UART_SetConfig+0x6c4>
 80043b4:	3b02      	subs	r3, #2
 80043b6:	2b1e      	cmp	r3, #30
 80043b8:	d87e      	bhi.n	80044b8 <UART_SetConfig+0x6c4>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0x5cc>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	08004443 	.word	0x08004443
 80043c4:	080044b9 	.word	0x080044b9
 80043c8:	0800444b 	.word	0x0800444b
 80043cc:	080044b9 	.word	0x080044b9
 80043d0:	080044b9 	.word	0x080044b9
 80043d4:	080044b9 	.word	0x080044b9
 80043d8:	0800445b 	.word	0x0800445b
 80043dc:	080044b9 	.word	0x080044b9
 80043e0:	080044b9 	.word	0x080044b9
 80043e4:	080044b9 	.word	0x080044b9
 80043e8:	080044b9 	.word	0x080044b9
 80043ec:	080044b9 	.word	0x080044b9
 80043f0:	080044b9 	.word	0x080044b9
 80043f4:	080044b9 	.word	0x080044b9
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	080044b9 	.word	0x080044b9
 8004400:	080044b9 	.word	0x080044b9
 8004404:	080044b9 	.word	0x080044b9
 8004408:	080044b9 	.word	0x080044b9
 800440c:	080044b9 	.word	0x080044b9
 8004410:	080044b9 	.word	0x080044b9
 8004414:	080044b9 	.word	0x080044b9
 8004418:	080044b9 	.word	0x080044b9
 800441c:	080044b9 	.word	0x080044b9
 8004420:	080044b9 	.word	0x080044b9
 8004424:	080044b9 	.word	0x080044b9
 8004428:	080044b9 	.word	0x080044b9
 800442c:	080044b9 	.word	0x080044b9
 8004430:	080044b9 	.word	0x080044b9
 8004434:	080044b9 	.word	0x080044b9
 8004438:	080044ab 	.word	0x080044ab
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d037      	beq.n	80044b0 <UART_SetConfig+0x6bc>
 8004440:	e03a      	b.n	80044b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004442:	f7fe fb1b 	bl	8002a7c <HAL_RCCEx_GetD3PCLK1Freq>
 8004446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004448:	e03c      	b.n	80044c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800444a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fb2a 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004458:	e034      	b.n	80044c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800445a:	f107 0318 	add.w	r3, r7, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fc76 	bl	8002d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004468:	e02c      	b.n	80044c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <UART_SetConfig+0x69c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004476:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <UART_SetConfig+0x69c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	08db      	lsrs	r3, r3, #3
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	4a07      	ldr	r2, [pc, #28]	@ (80044a0 <UART_SetConfig+0x6ac>)
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004488:	e01c      	b.n	80044c4 <UART_SetConfig+0x6d0>
 800448a:	bf00      	nop
 800448c:	40011400 	.word	0x40011400
 8004490:	58024400 	.word	0x58024400
 8004494:	40007800 	.word	0x40007800
 8004498:	40007c00 	.word	0x40007c00
 800449c:	58000c00 	.word	0x58000c00
 80044a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b9d      	ldr	r3, [pc, #628]	@ (800471c <UART_SetConfig+0x928>)
 80044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044a8:	e00c      	b.n	80044c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80044aa:	4b9d      	ldr	r3, [pc, #628]	@ (8004720 <UART_SetConfig+0x92c>)
 80044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044ae:	e009      	b.n	80044c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80044b6:	e005      	b.n	80044c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80044c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 81de 	beq.w	8004888 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	4a94      	ldr	r2, [pc, #592]	@ (8004724 <UART_SetConfig+0x930>)
 80044d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	fbb3 f3f2 	udiv	r3, r3, r2
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d305      	bcc.n	80044fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d903      	bls.n	8004504 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004502:	e1c1      	b.n	8004888 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	2200      	movs	r2, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	60fa      	str	r2, [r7, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	4a84      	ldr	r2, [pc, #528]	@ (8004724 <UART_SetConfig+0x930>)
 8004512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004516:	b29b      	uxth	r3, r3
 8004518:	2200      	movs	r2, #0
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004526:	f7fb fed7 	bl	80002d8 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	020b      	lsls	r3, r1, #8
 800453c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004540:	0202      	lsls	r2, r0, #8
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	6849      	ldr	r1, [r1, #4]
 8004546:	0849      	lsrs	r1, r1, #1
 8004548:	2000      	movs	r0, #0
 800454a:	460c      	mov	r4, r1
 800454c:	4605      	mov	r5, r0
 800454e:	eb12 0804 	adds.w	r8, r2, r4
 8004552:	eb43 0905 	adc.w	r9, r3, r5
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	469a      	mov	sl, r3
 800455e:	4693      	mov	fp, r2
 8004560:	4652      	mov	r2, sl
 8004562:	465b      	mov	r3, fp
 8004564:	4640      	mov	r0, r8
 8004566:	4649      	mov	r1, r9
 8004568:	f7fb feb6 	bl	80002d8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457a:	d308      	bcc.n	800458e <UART_SetConfig+0x79a>
 800457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004582:	d204      	bcs.n	800458e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e17c      	b.n	8004888 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004594:	e178      	b.n	8004888 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459e:	f040 80c5 	bne.w	800472c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80045a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	dc48      	bgt.n	800463c <UART_SetConfig+0x848>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db7b      	blt.n	80046a6 <UART_SetConfig+0x8b2>
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d879      	bhi.n	80046a6 <UART_SetConfig+0x8b2>
 80045b2:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0x7c4>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	08004643 	.word	0x08004643
 80045bc:	0800464b 	.word	0x0800464b
 80045c0:	080046a7 	.word	0x080046a7
 80045c4:	080046a7 	.word	0x080046a7
 80045c8:	08004653 	.word	0x08004653
 80045cc:	080046a7 	.word	0x080046a7
 80045d0:	080046a7 	.word	0x080046a7
 80045d4:	080046a7 	.word	0x080046a7
 80045d8:	08004663 	.word	0x08004663
 80045dc:	080046a7 	.word	0x080046a7
 80045e0:	080046a7 	.word	0x080046a7
 80045e4:	080046a7 	.word	0x080046a7
 80045e8:	080046a7 	.word	0x080046a7
 80045ec:	080046a7 	.word	0x080046a7
 80045f0:	080046a7 	.word	0x080046a7
 80045f4:	080046a7 	.word	0x080046a7
 80045f8:	08004673 	.word	0x08004673
 80045fc:	080046a7 	.word	0x080046a7
 8004600:	080046a7 	.word	0x080046a7
 8004604:	080046a7 	.word	0x080046a7
 8004608:	080046a7 	.word	0x080046a7
 800460c:	080046a7 	.word	0x080046a7
 8004610:	080046a7 	.word	0x080046a7
 8004614:	080046a7 	.word	0x080046a7
 8004618:	080046a7 	.word	0x080046a7
 800461c:	080046a7 	.word	0x080046a7
 8004620:	080046a7 	.word	0x080046a7
 8004624:	080046a7 	.word	0x080046a7
 8004628:	080046a7 	.word	0x080046a7
 800462c:	080046a7 	.word	0x080046a7
 8004630:	080046a7 	.word	0x080046a7
 8004634:	080046a7 	.word	0x080046a7
 8004638:	08004699 	.word	0x08004699
 800463c:	2b40      	cmp	r3, #64	@ 0x40
 800463e:	d02e      	beq.n	800469e <UART_SetConfig+0x8aa>
 8004640:	e031      	b.n	80046a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7fe f9ef 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 8004646:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004648:	e033      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464a:	f7fe fa01 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 800464e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004650:	e02f      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fa26 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004660:	e027      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004662:	f107 0318 	add.w	r3, r7, #24
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fb72 	bl	8002d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004670:	e01f      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004672:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <UART_SetConfig+0x934>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800467e:	4b2a      	ldr	r3, [pc, #168]	@ (8004728 <UART_SetConfig+0x934>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	08db      	lsrs	r3, r3, #3
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	4a24      	ldr	r2, [pc, #144]	@ (800471c <UART_SetConfig+0x928>)
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004690:	e00f      	b.n	80046b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004692:	4b22      	ldr	r3, [pc, #136]	@ (800471c <UART_SetConfig+0x928>)
 8004694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004696:	e00c      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004698:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <UART_SetConfig+0x92c>)
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800469c:	e009      	b.n	80046b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046a4:	e005      	b.n	80046b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80046b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80e7 	beq.w	8004888 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <UART_SetConfig+0x930>)
 80046c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80046cc:	005a      	lsls	r2, r3, #1
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	441a      	add	r2, r3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	d916      	bls.n	8004714 <UART_SetConfig+0x920>
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d212      	bcs.n	8004714 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f023 030f 	bic.w	r3, r3, #15
 80046f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	b29a      	uxth	r2, r3
 8004704:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004706:	4313      	orrs	r3, r2
 8004708:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e0b9      	b.n	8004888 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800471a:	e0b5      	b.n	8004888 <UART_SetConfig+0xa94>
 800471c:	03d09000 	.word	0x03d09000
 8004720:	003d0900 	.word	0x003d0900
 8004724:	08004d90 	.word	0x08004d90
 8004728:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800472c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004730:	2b20      	cmp	r3, #32
 8004732:	dc49      	bgt.n	80047c8 <UART_SetConfig+0x9d4>
 8004734:	2b00      	cmp	r3, #0
 8004736:	db7c      	blt.n	8004832 <UART_SetConfig+0xa3e>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d87a      	bhi.n	8004832 <UART_SetConfig+0xa3e>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0x950>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	080047cf 	.word	0x080047cf
 8004748:	080047d7 	.word	0x080047d7
 800474c:	08004833 	.word	0x08004833
 8004750:	08004833 	.word	0x08004833
 8004754:	080047df 	.word	0x080047df
 8004758:	08004833 	.word	0x08004833
 800475c:	08004833 	.word	0x08004833
 8004760:	08004833 	.word	0x08004833
 8004764:	080047ef 	.word	0x080047ef
 8004768:	08004833 	.word	0x08004833
 800476c:	08004833 	.word	0x08004833
 8004770:	08004833 	.word	0x08004833
 8004774:	08004833 	.word	0x08004833
 8004778:	08004833 	.word	0x08004833
 800477c:	08004833 	.word	0x08004833
 8004780:	08004833 	.word	0x08004833
 8004784:	080047ff 	.word	0x080047ff
 8004788:	08004833 	.word	0x08004833
 800478c:	08004833 	.word	0x08004833
 8004790:	08004833 	.word	0x08004833
 8004794:	08004833 	.word	0x08004833
 8004798:	08004833 	.word	0x08004833
 800479c:	08004833 	.word	0x08004833
 80047a0:	08004833 	.word	0x08004833
 80047a4:	08004833 	.word	0x08004833
 80047a8:	08004833 	.word	0x08004833
 80047ac:	08004833 	.word	0x08004833
 80047b0:	08004833 	.word	0x08004833
 80047b4:	08004833 	.word	0x08004833
 80047b8:	08004833 	.word	0x08004833
 80047bc:	08004833 	.word	0x08004833
 80047c0:	08004833 	.word	0x08004833
 80047c4:	08004825 	.word	0x08004825
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d02e      	beq.n	800482a <UART_SetConfig+0xa36>
 80047cc:	e031      	b.n	8004832 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ce:	f7fe f929 	bl	8002a24 <HAL_RCC_GetPCLK1Freq>
 80047d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047d4:	e033      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d6:	f7fe f93b 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 80047da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047dc:	e02f      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f960 	bl	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047ec:	e027      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ee:	f107 0318 	add.w	r3, r7, #24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe faac 	bl	8002d50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047fc:	e01f      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <UART_SetConfig+0xac0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <UART_SetConfig+0xac0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	4a28      	ldr	r2, [pc, #160]	@ (80048b8 <UART_SetConfig+0xac4>)
 8004816:	fa22 f303 	lsr.w	r3, r2, r3
 800481a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800481c:	e00f      	b.n	800483e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800481e:	4b26      	ldr	r3, [pc, #152]	@ (80048b8 <UART_SetConfig+0xac4>)
 8004820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004822:	e00c      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004824:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <UART_SetConfig+0xac8>)
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004828:	e009      	b.n	800483e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004830:	e005      	b.n	800483e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800483c:	bf00      	nop
    }

    if (pclk != 0U)
 800483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d021      	beq.n	8004888 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <UART_SetConfig+0xacc>)
 800484a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800484e:	461a      	mov	r2, r3
 8004850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004852:	fbb3 f2f2 	udiv	r2, r3, r2
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	441a      	add	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d909      	bls.n	8004882 <UART_SetConfig+0xa8e>
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004874:	d205      	bcs.n	8004882 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	b29a      	uxth	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
 8004880:	e002      	b.n	8004888 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2201      	movs	r2, #1
 8004894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2200      	movs	r2, #0
 800489c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3748      	adds	r7, #72	@ 0x48
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	03d09000 	.word	0x03d09000
 80048bc:	003d0900 	.word	0x003d0900
 80048c0:	08004d90 	.word	0x08004d90

080048c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01a      	beq.n	80049da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c2:	d10a      	bne.n	80049da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b098      	sub	sp, #96	@ 0x60
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a18:	f7fc fc2a 	bl	8001270 <HAL_GetTick>
 8004a1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d12f      	bne.n	8004a8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f88e 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d022      	beq.n	8004a8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e6      	bne.n	8004a46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e063      	b.n	8004b54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d149      	bne.n	8004b2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f857 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03c      	beq.n	8004b2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e6      	bne.n	8004ab4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3308      	adds	r3, #8
 8004aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3308      	adds	r3, #8
 8004b04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b06:	61fa      	str	r2, [r7, #28]
 8004b08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	617b      	str	r3, [r7, #20]
   return(result);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e012      	b.n	8004b54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3758      	adds	r7, #88	@ 0x58
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	e04f      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b74:	d04b      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b76:	f7fc fb7b 	bl	8001270 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e04e      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d037      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b80      	cmp	r3, #128	@ 0x80
 8004ba2:	d034      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b40      	cmp	r3, #64	@ 0x40
 8004ba8:	d031      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d110      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f839 	bl	8004c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e029      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be8:	d111      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f81f 	bl	8004c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e00f      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d0a0      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b095      	sub	sp, #84	@ 0x54
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e6      	bne.n	8004c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	4b1e      	ldr	r3, [pc, #120]	@ (8004d00 <UART_EndRxTransfer+0xc8>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d118      	bne.n	8004ce0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e6      	bne.n	8004cae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cf4:	bf00      	nop
 8004cf6:	3754      	adds	r7, #84	@ 0x54
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	effffffe 	.word	0xeffffffe

08004d04 <memset>:
 8004d04:	4402      	add	r2, r0
 8004d06:	4603      	mov	r3, r0
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d100      	bne.n	8004d0e <memset+0xa>
 8004d0c:	4770      	bx	lr
 8004d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d12:	e7f9      	b.n	8004d08 <memset+0x4>

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	@ (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	@ (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	@ (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	@ (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 f818 	bl	8004d5c <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	08004db0 	.word	0x08004db0
 8004d50:	08004db0 	.word	0x08004db0
 8004d54:	08004db0 	.word	0x08004db0
 8004d58:	08004db4 	.word	0x08004db4

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
