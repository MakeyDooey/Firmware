
Demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08005374  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2400002c  080053a0  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000194  080053a0  00007194  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015608  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002656  00000000  00000000  0001c662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4e  00000000  00000000  0001fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acd4  00000000  00000000  00020b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015620  00000000  00000000  0005b7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001880e7  00000000  00000000  00070e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f8ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  001f8f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001fd784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005318 	.word	0x08005318

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08005318 	.word	0x08005318

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 800079c:	bf00      	nop
 800079e:	4baa      	ldr	r3, [pc, #680]	@ (8000a48 <main+0x2b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
		;
	if (timeout < 0) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
		Error_Handler();
 80007ba:	f000 fb21 	bl	8000e00 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007be:	f000 fe63 	bl	8001488 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c2:	f000 f94d 	bl	8000a60 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4ba0      	ldr	r3, [pc, #640]	@ (8000a48 <main+0x2b8>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a9e      	ldr	r2, [pc, #632]	@ (8000a48 <main+0x2b8>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b9c      	ldr	r3, [pc, #624]	@ (8000a48 <main+0x2b8>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 fa85 	bl	8001cf4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 fa9b 	bl	8001d28 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80007f8:	bf00      	nop
 80007fa:	4b93      	ldr	r3, [pc, #588]	@ (8000a48 <main+0x2b8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
		;
	if (timeout < 0) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
		Error_Handler();
 8000816:	f000 faf3 	bl	8000e00 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800081a:	f000 fa49 	bl	8000cb0 <MX_GPIO_Init>
	MX_TIM2_Init();
 800081e:	f000 f989 	bl	8000b34 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000822:	f000 f9eb 	bl	8000bfc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fcc5 	bl	80011b8 <BSP_PB_Init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	4886      	ldr	r0, [pc, #536]	@ (8000a4c <main+0x2bc>)
 8000832:	f002 fde3 	bl	80033fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000836:	2104      	movs	r1, #4
 8000838:	4884      	ldr	r0, [pc, #528]	@ (8000a4c <main+0x2bc>)
 800083a:	f002 fddf 	bl	80033fc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800083e:	4b83      	ldr	r3, [pc, #524]	@ (8000a4c <main+0x2bc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000846:	4b81      	ldr	r3, [pc, #516]	@ (8000a4c <main+0x2bc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 800084e:	4b80      	ldr	r3, [pc, #512]	@ (8000a50 <main+0x2c0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000854:	4b7f      	ldr	r3, [pc, #508]	@ (8000a54 <main+0x2c4>)
 8000856:	fba3 1302 	umull	r1, r3, r3, r2
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	ee07 3a90 	vmov	s15, r3
 800086a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800086e:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8000a40 <main+0x2b0>
 8000872:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000876:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800087a:	ee17 3a90 	vmov	r3, s15
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b75      	ldr	r3, [pc, #468]	@ (8000a58 <main+0x2c8>)
 8000882:	801a      	strh	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Initialize leds */
	BSP_LED_Init(LED_GREEN);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fc21 	bl	80010cc <BSP_LED_Init>
	BSP_LED_Init(LED_YELLOW);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fc1e 	bl	80010cc <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8000890:	2002      	movs	r0, #2
 8000892:	f000 fc1b 	bl	80010cc <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fc8d 	bl	80011b8 <BSP_PB_Init>

	/* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	BspCOMInit.BaudRate = 115200;
 800089e:	4b6f      	ldr	r3, [pc, #444]	@ (8000a5c <main+0x2cc>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a4:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008a6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a5c <main+0x2cc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits = COM_STOPBITS_1;
 80008ac:	4b6b      	ldr	r3, [pc, #428]	@ (8000a5c <main+0x2cc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity = COM_PARITY_NONE;
 80008b2:	4b6a      	ldr	r3, [pc, #424]	@ (8000a5c <main+0x2cc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl = COM_HWCONTROL_NONE;
 80008b8:	4b68      	ldr	r3, [pc, #416]	@ (8000a5c <main+0x2cc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE) {
 80008be:	4967      	ldr	r1, [pc, #412]	@ (8000a5c <main+0x2cc>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fd1f 	bl	8001304 <BSP_COM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <main+0x140>
		Error_Handler();
 80008cc:	f000 fa98 	bl	8000e00 <Error_Handler>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//HAL_Delay(5);
		counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 80008d0:	4b5f      	ldr	r3, [pc, #380]	@ (8000a50 <main+0x2c0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a54 <main+0x2c4>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008f0:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8000a40 <main+0x2b0>
 80008f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008fc:	ee17 3a90 	vmov	r3, s15
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b55      	ldr	r3, [pc, #340]	@ (8000a58 <main+0x2c8>)
 8000904:	801a      	strh	r2, [r3, #0]

		if (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fcc8 	bl	800129c <BSP_PB_GetState>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d036      	beq.n	8000980 <main+0x1f0>
			HAL_Delay(25);
 8000912:	2019      	movs	r0, #25
 8000914:	f000 fe4a 	bl	80015ac <HAL_Delay>
			if (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000918:	2000      	movs	r0, #0
 800091a:	f000 fcbf 	bl	800129c <BSP_PB_GetState>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d02d      	beq.n	8000980 <main+0x1f0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000924:	4b49      	ldr	r3, [pc, #292]	@ (8000a4c <main+0x2bc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 300);
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <main+0x2bc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000934:	639a      	str	r2, [r3, #56]	@ 0x38
				while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000936:	e01d      	b.n	8000974 <main+0x1e4>
					counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 8000938:	4b45      	ldr	r3, [pc, #276]	@ (8000a50 <main+0x2c0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800093e:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <main+0x2c4>)
 8000940:	fba3 1302 	umull	r1, r3, r3, r2
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000958:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000a40 <main+0x2b0>
 800095c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000960:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000964:	ee17 3a90 	vmov	r3, s15
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a58 <main+0x2c8>)
 800096c:	801a      	strh	r2, [r3, #0]
					HAL_Delay(25);
 800096e:	2019      	movs	r0, #25
 8000970:	f000 fe1c 	bl	80015ac <HAL_Delay>
				while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_RESET) {
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fc91 	bl	800129c <BSP_PB_GetState>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1db      	bne.n	8000938 <main+0x1a8>
			} else
				;

		}
		// PID MODE
		counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 8000980:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <main+0x2c0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000986:	4b33      	ldr	r3, [pc, #204]	@ (8000a54 <main+0x2c4>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 8000992:	fb01 f303 	mul.w	r3, r1, r3
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	ee07 3a90 	vmov	s15, r3
 800099c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009a0:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000a40 <main+0x2b0>
 80009a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009ac:	ee17 3a90 	vmov	r3, s15
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <main+0x2c8>)
 80009b4:	801a      	strh	r2, [r3, #0]

		if ((counter < 2) || (counter > 357)) {
 80009b6:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <main+0x2c8>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d905      	bls.n	80009cc <main+0x23c>
 80009c0:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <main+0x2c8>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f5b3 7fb3 	cmp.w	r3, #358	@ 0x166
 80009ca:	d307      	bcc.n	80009dc <main+0x24c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <main+0x2bc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <main+0x2bc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <main+0x2c0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <main+0x2c4>)
 80009e4:	fba3 1302 	umull	r1, r3, r3, r2
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 80009ee:	fb01 f303 	mul.w	r3, r1, r3
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	ee07 3a90 	vmov	s15, r3
 80009f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009fc:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000a40 <main+0x2b0>
 8000a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a08:	ee17 3a90 	vmov	r3, s15
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <main+0x2c8>)
 8000a10:	801a      	strh	r2, [r3, #0]

		if (counter >= 180) {
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <main+0x2c8>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	2bb3      	cmp	r3, #179	@ 0xb3
 8000a1a:	d908      	bls.n	8000a2e <main+0x29e>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <main+0x2bc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	22c8      	movs	r2, #200	@ 0xc8
 8000a22:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <main+0x2bc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2c:	e750      	b.n	80008d0 <main+0x140>

		} else {
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <main+0x2bc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 200);
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <main+0x2bc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	22c8      	movs	r2, #200	@ 0xc8
 8000a3c:	639a      	str	r2, [r3, #56]	@ 0x38
		counter = DEGREES(__HAL_TIM_GET_COUNTER(&htim3));
 8000a3e:	e747      	b.n	80008d0 <main+0x140>
 8000a40:	60000000 	.word	0x60000000
 8000a44:	3fd326f1 	.word	0x3fd326f1
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	24000058 	.word	0x24000058
 8000a50:	240000a4 	.word	0x240000a4
 8000a54:	367a25e1 	.word	0x367a25e1
 8000a58:	240000f0 	.word	0x240000f0
 8000a5c:	24000048 	.word	0x24000048

08000a60 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	@ 0x70
 8000a64:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	224c      	movs	r2, #76	@ 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fc26 	bl	80052c0 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fc20 	bl	80052c0 <memset>

		/** Supply configuration update enable
		 */
		HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a80:	2004      	movs	r0, #4
 8000a82:	f001 f965 	bl	8001d50 <HAL_PWREx_ConfigSupply>

		/** Configure the main internal regulator output voltage
		 */
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a96:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

		while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000abc:	bf00      	nop
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aca:	d1f8      	bne.n	8000abe <SystemClock_Config+0x5e>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
		RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2340      	movs	r3, #64	@ 0x40
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 f98f 	bl	8001e04 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x90>
			Error_Handler();
 8000aec:	f000 f988 	bl	8000e00 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	@ 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
				| RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
		RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fdcf 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xc4>
				!= HAL_OK) {
			Error_Handler();
 8000b20:	f000 f96e 	bl	8000e00 <Error_Handler>
		}
	}
 8000b24:	bf00      	nop
 8000b26:	3770      	adds	r7, #112	@ 0x70
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58000400 	.word	0x58000400
 8000b30:	58024800 	.word	0x58024800

08000b34 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	@ 0x28
 8000b38:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 1023;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b6e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b72:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000b80:	481d      	ldr	r0, [pc, #116]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000b82:	f002 fbe3 	bl	800334c <HAL_TIM_PWM_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x5c>
			Error_Handler();
 8000b8c:	f000 f938 	bl	8000e00 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4816      	ldr	r0, [pc, #88]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000ba0:	f003 fb1e 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x7a>
				!= HAL_OK) {
			Error_Handler();
 8000baa:	f000 f929 	bl	8000e00 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bae:	2360      	movs	r3, #96	@ 0x60
 8000bb0:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000bc6:	f002 fe5b 	bl	8003880 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0xa0>
				!= HAL_OK) {
			Error_Handler();
 8000bd0:	f000 f916 	bl	8000e00 <Error_Handler>
		}
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000bdc:	f002 fe50 	bl	8003880 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0xb6>
				!= HAL_OK) {
			Error_Handler();
 8000be6:	f000 f90b 	bl	8000e00 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */
		HAL_TIM_MspPostInit(&htim2);
 8000bea:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <MX_TIM2_Init+0xc4>)
 8000bec:	f000 f9b2 	bl	8000f54 <HAL_TIM_MspPostInit>

	}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000058 	.word	0x24000058

08000bfc <MX_TIM3_Init>:
	/**
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	@ 0x30
 8000c00:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fb58 	bl	80052c0 <memset>
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c1c:	4a23      	ldr	r2, [pc, #140]	@ (8000cac <MX_TIM3_Init+0xb0>)
 8000c1e:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8000c20:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 65535;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
		sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c40:	2303      	movs	r3, #3
 8000c42:	60fb      	str	r3, [r7, #12]
		sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
		sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
		sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
		sConfig.IC1Filter = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
		sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
		sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
		sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
		sConfig.IC2Filter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480f      	ldr	r0, [pc, #60]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c6c:	f002 fcd4 	bl	8003618 <HAL_TIM_Encoder_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x7e>
			Error_Handler();
 8000c76:	f000 f8c3 	bl	8000e00 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c88:	f003 faaa 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x9a>
				!= HAL_OK) {
			Error_Handler();
 8000c92:	f000 f8b5 	bl	8000e00 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c96:	213c      	movs	r1, #60	@ 0x3c
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <MX_TIM3_Init+0xac>)
 8000c9a:	f002 fd63 	bl	8003764 <HAL_TIM_Encoder_Start>
		/* USER CODE END TIM3_Init 2 */

	}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	@ 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240000a4 	.word	0x240000a4
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */

		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b49      	ldr	r3, [pc, #292]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a47      	ldr	r2, [pc, #284]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b45      	ldr	r3, [pc, #276]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b41      	ldr	r3, [pc, #260]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	4a40      	ldr	r2, [pc, #256]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a38      	ldr	r2, [pc, #224]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b36      	ldr	r3, [pc, #216]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a31      	ldr	r2, [pc, #196]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <MX_GPIO_Init+0x13c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pins : PC1 PC4 PC5 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000d3e:	2332      	movs	r3, #50	@ 0x32
 8000d40:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4825      	ldr	r0, [pc, #148]	@ (8000df0 <MX_GPIO_Init+0x140>)
 8000d5a:	f000 fde9 	bl	8001930 <HAL_GPIO_Init>

		/*Configure GPIO pins : PA1 PA2 PA7 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000d5e:	2386      	movs	r3, #134	@ 0x86
 8000d60:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6e:	230b      	movs	r3, #11
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	481e      	ldr	r0, [pc, #120]	@ (8000df4 <MX_GPIO_Init+0x144>)
 8000d7a:	f000 fdd9 	bl	8001930 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB13 */
		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d82:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d90:	230b      	movs	r3, #11
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4817      	ldr	r0, [pc, #92]	@ (8000df8 <MX_GPIO_Init+0x148>)
 8000d9c:	f000 fdc8 	bl	8001930 <HAL_GPIO_Init>

		/*Configure GPIO pins : PA8 PA11 PA12 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12;
 8000da0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000da4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000db2:	230a      	movs	r3, #10
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_GPIO_Init+0x144>)
 8000dbe:	f000 fdb7 	bl	8001930 <HAL_GPIO_Init>

		/*Configure GPIO pins : PG11 PG13 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000dc2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dc6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd4:	230b      	movs	r3, #11
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <MX_GPIO_Init+0x14c>)
 8000de0:	f000 fda6 	bl	8001930 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */

		/* USER CODE END MX_GPIO_Init_2 */
	}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	@ 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58021800 	.word	0x58021800

08000e00 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <HAL_MspInit+0x30>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e18:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_MspInit+0x30>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	58024400 	.word	0x58024400

08000e40 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e50:	d10e      	bne.n	8000e70 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a29      	ldr	r2, [pc, #164]	@ (8000f44 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d14c      	bne.n	8000f3c <HAL_TIM_Encoder_MspInit+0xbc>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea8:	4a27      	ldr	r2, [pc, #156]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eee:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000efc:	2340      	movs	r3, #64	@ 0x40
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <HAL_TIM_Encoder_MspInit+0xcc>)
 8000f18:	f000 fd0a 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000f38:	f000 fcfa 	bl	8001930 <HAL_GPIO_Init>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40000400 	.word	0x40000400
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	58020800 	.word	0x58020800

08000f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d13d      	bne.n	8000ff2 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_TIM_MspPostInit+0xa8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <HAL_TIM_MspPostInit+0xac>)
 8000fce:	f000 fcaf 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <HAL_TIM_MspPostInit+0xb0>)
 8000fee:	f000 fc9f 	bl	8001930 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	@ 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020000 	.word	0x58020000
 8001004:	58020400 	.word	0x58020400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 fa85 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}

08001066 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f92c 	bl	80012c8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001078:	f7ff fb72 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff fac2 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f004 f913 	bl	80052d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fb71 	bl	8000790 <main>
  bx  lr
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b8:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 80010bc:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 80010c0:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 80010c4:	24000194 	.word	0x24000194

080010c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC3_IRQHandler>
	...

080010cc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <BSP_LED_Init+0x28>
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d006      	beq.n	80010f4 <BSP_LED_Init+0x28>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d003      	beq.n	80010f4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010ec:	f06f 0301 	mvn.w	r3, #1
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010f2:	e055      	b.n	80011a0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10f      	bne.n	800111a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80010fa:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <BSP_LED_Init+0xe0>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a2a      	ldr	r2, [pc, #168]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <BSP_LED_Init+0xe0>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	e021      	b.n	800115e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d10f      	bne.n	8001140 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	e00e      	b.n	800115e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	4a19      	ldr	r2, [pc, #100]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <BSP_LED_Init+0xe0>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <BSP_LED_Init+0xe4>)
 8001162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001166:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <BSP_LED_Init+0xe8>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	f107 0218 	add.w	r2, r7, #24
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fbd4 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <BSP_LED_Init+0xe8>)
 800118c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <BSP_LED_Init+0xe4>)
 8001194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f000 fd90 	bl	8001cc0 <HAL_GPIO_WritePin>
  }

  return ret;
 80011a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3730      	adds	r7, #48	@ 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	58024400 	.word	0x58024400
 80011b0:	08005340 	.word	0x08005340
 80011b4:	2400000c 	.word	0x2400000c

080011b8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80011c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <BSP_PB_Init+0xcc>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001284 <BSP_PB_Init+0xcc>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <BSP_PB_Init+0xcc>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80011ec:	2302      	movs	r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a21      	ldr	r2, [pc, #132]	@ (8001288 <BSP_PB_Init+0xd0>)
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fb8f 	bl	8001930 <HAL_GPIO_Init>
 8001212:	e031      	b.n	8001278 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001218:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <BSP_PB_Init+0xd0>)
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fb81 	bl	8001930 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4a16      	ldr	r2, [pc, #88]	@ (800128c <BSP_PB_Init+0xd4>)
 8001234:	441a      	add	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4915      	ldr	r1, [pc, #84]	@ (8001290 <BSP_PB_Init+0xd8>)
 800123a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f000 fb24 	bl	800188e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4a10      	ldr	r2, [pc, #64]	@ (800128c <BSP_PB_Init+0xd4>)
 800124c:	1898      	adds	r0, r3, r2
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <BSP_PB_Init+0xdc>)
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	461a      	mov	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	f000 faf9 	bl	8001850 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800125e:	2028      	movs	r0, #40	@ 0x28
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <BSP_PB_Init+0xe0>)
 8001264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	f000 faa9 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001270:	2328      	movs	r3, #40	@ 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fabf 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	58024400 	.word	0x58024400
 8001288:	24000018 	.word	0x24000018
 800128c:	240000f4 	.word	0x240000f4
 8001290:	08005348 	.word	0x08005348
 8001294:	2400001c 	.word	0x2400001c
 8001298:	24000020 	.word	0x24000020

0800129c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <BSP_PB_GetState+0x28>)
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fceb 	bl	8001c90 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000018 	.word	0x24000018

080012c8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <BSP_PB_IRQHandler+0x20>)
 80012d8:	4413      	add	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 faec 	bl	80018b8 <HAL_EXTI_IRQHandler>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000f4 	.word	0x240000f4

080012ec <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800131a:	f06f 0301 	mvn.w	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	e018      	b.n	8001354 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2294      	movs	r2, #148	@ 0x94
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <BSP_COM_Init+0x5c>)
 800132c:	4413      	add	r3, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f852 	bl	80013d8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2294      	movs	r2, #148	@ 0x94
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4a08      	ldr	r2, [pc, #32]	@ (8001360 <BSP_COM_Init+0x5c>)
 800133e:	4413      	add	r3, r2
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f80e 	bl	8001364 <MX_USART3_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800134e:	f06f 0303 	mvn.w	r3, #3
 8001352:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001354:	68fb      	ldr	r3, [r7, #12]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	240000fc 	.word	0x240000fc

08001364 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <MX_USART3_Init+0x60>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	220c      	movs	r2, #12
 8001382:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	895b      	ldrh	r3, [r3, #10]
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	891b      	ldrh	r3, [r3, #8]
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	899b      	ldrh	r3, [r3, #12]
 80013a4:	461a      	mov	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f002 ffa2 	bl	80042fc <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	24000008 	.word	0x24000008

080013c8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff ff8d 	bl	80012ec <BSP_PB_Callback>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <COM1_MspInit+0xa8>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <COM1_MspInit+0xa8>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <COM1_MspInit+0xa8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <COM1_MspInit+0xa8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <COM1_MspInit+0xa8>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <COM1_MspInit+0xa8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <COM1_MspInit+0xa8>)
 800141e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001422:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <COM1_MspInit+0xa8>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001428:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <COM1_MspInit+0xa8>)
 800142e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800143a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800144c:	2307      	movs	r3, #7
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <COM1_MspInit+0xac>)
 8001458:	f000 fa6a 	bl	8001930 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800145c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001460:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001466:	2307      	movs	r3, #7
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <COM1_MspInit+0xac>)
 8001472:	f000 fa5d 	bl	8001930 <HAL_GPIO_Init>
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	58024400 	.word	0x58024400
 8001484:	58020c00 	.word	0x58020c00

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f98c 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f001 fac6 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4913      	ldr	r1, [pc, #76]	@ (80014f4 <HAL_Init+0x6c>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f814 	bl	8001500 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fc93 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	08005330 	.word	0x08005330
 80014f8:	24000004 	.word	0x24000004
 80014fc:	24000000 	.word	0x24000000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e021      	b.n	8001558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_InitTick+0x64>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f971 	bl	8001812 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001548:	f000 f93b 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <HAL_InitTick+0x68>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24000028 	.word	0x24000028
 8001564:	24000000 	.word	0x24000000
 8001568:	24000024 	.word	0x24000024

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	24000028 	.word	0x24000028
 8001590:	24000190 	.word	0x24000190

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	24000190 	.word	0x24000190

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	24000028 	.word	0x24000028

080015f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_GetREVID+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	5c001000 	.word	0x5c001000

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	4313      	orrs	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	05fa0000 	.word	0x05fa0000

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	@ (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	@ (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	@ (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff40 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff90 	bl	8001700 <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5f 	bl	80016ac <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff33 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa4 	bl	8001768 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_GetCurrentCPUID+0x20>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001838:	2b70      	cmp	r3, #112	@ 0x70
 800183a:	d101      	bne.n	8001840 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800183c:	2303      	movs	r3, #3
 800183e:	e000      	b.n	8001842 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	460b      	mov	r3, r1
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00a      	b.n	8001882 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
      break;
 8001878:	e002      	b.n	8001880 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
      break;
 800187e:	bf00      	nop
  }

  return status;
 8001880:	7dfb      	ldrb	r3, [r7, #23]
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e003      	b.n	80018aa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2201      	movs	r2, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80018dc:	f7ff ffa6 	bl	800182c <HAL_GetCurrentCPUID>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d105      	bne.n	80018f2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	011a      	lsls	r2, r3, #4
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_EXTI_IRQHandler+0x70>)
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e004      	b.n	80018fc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	011a      	lsls	r2, r3, #4
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_EXTI_IRQHandler+0x74>)
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d009      	beq.n	8001920 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4798      	blx	r3
    }
  }
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58000088 	.word	0x58000088
 800192c:	580000c8 	.word	0x580000c8

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800193e:	4b89      	ldr	r3, [pc, #548]	@ (8001b64 <HAL_GPIO_Init+0x234>)
 8001940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001942:	e194      	b.n	8001c6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8186 	beq.w	8001c68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d005      	beq.n	8001974 <HAL_GPIO_Init+0x44>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d130      	bne.n	80019d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	2201      	movs	r2, #1
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 0201 	and.w	r2, r3, #1
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d017      	beq.n	8001a12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	69b9      	ldr	r1, [r7, #24]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e0 	beq.w	8001c68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aae:	4a2e      	ldr	r2, [pc, #184]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <HAL_GPIO_Init+0x238>)
 8001aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a29      	ldr	r2, [pc, #164]	@ (8001b6c <HAL_GPIO_Init+0x23c>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a20      	ldr	r2, [pc, #128]	@ (8001b70 <HAL_GPIO_Init+0x240>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d052      	beq.n	8001b98 <HAL_GPIO_Init+0x268>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_GPIO_Init+0x244>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_GPIO_Init+0x22e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_GPIO_Init+0x248>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x22a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1d      	ldr	r2, [pc, #116]	@ (8001b7c <HAL_GPIO_Init+0x24c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <HAL_GPIO_Init+0x250>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_GPIO_Init+0x254>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b88 <HAL_GPIO_Init+0x258>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_GPIO_Init+0x25c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x216>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x260>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x212>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <HAL_GPIO_Init+0x264>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	e02d      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b3e:	230a      	movs	r3, #10
 8001b40:	e02b      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b42:	2308      	movs	r3, #8
 8001b44:	e029      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e027      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e025      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e023      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e01f      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e01d      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e01b      	b.n	8001b9a <HAL_GPIO_Init+0x26a>
 8001b62:	bf00      	nop
 8001b64:	58000080 	.word	0x58000080
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58000400 	.word	0x58000400
 8001b70:	58020000 	.word	0x58020000
 8001b74:	58020400 	.word	0x58020400
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020c00 	.word	0x58020c00
 8001b80:	58021000 	.word	0x58021000
 8001b84:	58021400 	.word	0x58021400
 8001b88:	58021800 	.word	0x58021800
 8001b8c:	58021c00 	.word	0x58021c00
 8001b90:	58022000 	.word	0x58022000
 8001b94:	58022400 	.word	0x58022400
 8001b98:	2300      	movs	r3, #0
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001baa:	4938      	ldr	r1, [pc, #224]	@ (8001c8c <HAL_GPIO_Init+0x35c>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f47f ae63 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3724      	adds	r7, #36	@ 0x24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	58000400 	.word	0x58000400

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cfc:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_HSEM_FastTake+0x2c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3320      	adds	r3, #32
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_HSEM_FastTake+0x30>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	58026400 	.word	0x58026400
 8001d24:	80000300 	.word	0x80000300

08001d28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d32:	4906      	ldr	r1, [pc, #24]	@ (8001d4c <HAL_HSEM_Release+0x24>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	58026400 	.word	0x58026400

08001d50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d00a      	beq.n	8001d7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e040      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e03e      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d82:	491f      	ldr	r1, [pc, #124]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d8a:	f7ff fc03 	bl	8001594 <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d92:	f7ff fbff 	bl	8001594 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001da0:	d901      	bls.n	8001da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e028      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db2:	d1ee      	bne.n	8001d92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b1e      	cmp	r3, #30
 8001db8:	d008      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dbe:	d005      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b1d      	cmp	r3, #29
 8001dc4:	d002      	beq.n	8001dcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001dca:	d114      	bne.n	8001df6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001dcc:	f7ff fbe2 	bl	8001594 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dd4:	f7ff fbde 	bl	8001594 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001de2:	d901      	bls.n	8001de8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	58024800 	.word	0x58024800

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f000 bc48 	b.w	80026a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8088 	beq.w	8001f36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b99      	ldr	r3, [pc, #612]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e30:	4b96      	ldr	r3, [pc, #600]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d007      	beq.n	8001e4c <HAL_RCC_OscConfig+0x48>
 8001e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3e:	2b18      	cmp	r3, #24
 8001e40:	d111      	bne.n	8001e66 <HAL_RCC_OscConfig+0x62>
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06d      	beq.n	8001f34 <HAL_RCC_OscConfig+0x130>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d169      	bne.n	8001f34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f000 bc21 	b.w	80026a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x7a>
 8001e70:	4b86      	ldr	r3, [pc, #536]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a85      	ldr	r2, [pc, #532]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x9c>
 8001e86:	4b81      	ldr	r3, [pc, #516]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a80      	ldr	r2, [pc, #512]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b7e      	ldr	r3, [pc, #504]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7d      	ldr	r2, [pc, #500]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xc0>
 8001eaa:	4b78      	ldr	r3, [pc, #480]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b75      	ldr	r3, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a74      	ldr	r2, [pc, #464]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001ec4:	4b71      	ldr	r3, [pc, #452]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a70      	ldr	r2, [pc, #448]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6d      	ldr	r2, [pc, #436]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fb56 	bl	8001594 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb52 	bl	8001594 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	@ 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e3d4      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001efe:	4b63      	ldr	r3, [pc, #396]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe8>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb42 	bl	8001594 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fb3e 	bl	8001594 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	@ 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e3c0      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f26:	4b59      	ldr	r3, [pc, #356]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x110>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80ca 	beq.w	80020d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f44:	4b51      	ldr	r3, [pc, #324]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_RCC_OscConfig+0x166>
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	2b18      	cmp	r3, #24
 8001f5e:	d156      	bne.n	800200e <HAL_RCC_OscConfig+0x20a>
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d151      	bne.n	800200e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6a:	4b48      	ldr	r3, [pc, #288]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x17e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e392      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f82:	4b42      	ldr	r3, [pc, #264]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0219 	bic.w	r2, r3, #25
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	493f      	ldr	r1, [pc, #252]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fafe 	bl	8001594 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fafa 	bl	8001594 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e37c      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fae:	4b37      	ldr	r3, [pc, #220]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	f7ff fb1b 	bl	80015f4 <HAL_GetREVID>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d817      	bhi.n	8001ff8 <HAL_RCC_OscConfig+0x1f4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	d108      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x1de>
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe0:	e07a      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	031b      	lsls	r3, r3, #12
 8001ff0:	4926      	ldr	r1, [pc, #152]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff6:	e06f      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b24      	ldr	r3, [pc, #144]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	4921      	ldr	r1, [pc, #132]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200c:	e064      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d047      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0219 	bic.w	r2, r3, #25
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	491a      	ldr	r1, [pc, #104]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fab4 	bl	8001594 <HAL_GetTick>
 800202c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7ff fab0 	bl	8001594 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e332      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	f7ff fad1 	bl	80015f4 <HAL_GetREVID>
 8002052:	4603      	mov	r3, r0
 8002054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002058:	4293      	cmp	r3, r2
 800205a:	d819      	bhi.n	8002090 <HAL_RCC_OscConfig+0x28c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b40      	cmp	r3, #64	@ 0x40
 8002062:	d108      	bne.n	8002076 <HAL_RCC_OscConfig+0x272>
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002072:	6053      	str	r3, [r2, #4]
 8002074:	e030      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	031b      	lsls	r3, r3, #12
 8002084:	4901      	ldr	r1, [pc, #4]	@ (800208c <HAL_RCC_OscConfig+0x288>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
 800208a:	e025      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
 800208c:	58024400 	.word	0x58024400
 8002090:	4b9a      	ldr	r3, [pc, #616]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	4997      	ldr	r1, [pc, #604]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b95      	ldr	r3, [pc, #596]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a94      	ldr	r2, [pc, #592]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa6f 	bl	8001594 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fa6b 	bl	8001594 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2ed      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020cc:	4b8b      	ldr	r3, [pc, #556]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a9 	beq.w	8002238 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f0:	4b82      	ldr	r3, [pc, #520]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d007      	beq.n	800210c <HAL_RCC_OscConfig+0x308>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b18      	cmp	r3, #24
 8002100:	d13a      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d135      	bne.n	8002178 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800210c:	4b7b      	ldr	r3, [pc, #492]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b80      	cmp	r3, #128	@ 0x80
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e2c1      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002124:	f7ff fa66 	bl	80015f4 <HAL_GetREVID>
 8002128:	4603      	mov	r3, r0
 800212a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800212e:	4293      	cmp	r3, r2
 8002130:	d817      	bhi.n	8002162 <HAL_RCC_OscConfig+0x35e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d108      	bne.n	800214c <HAL_RCC_OscConfig+0x348>
 800213a:	4b70      	ldr	r3, [pc, #448]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002142:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002148:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214a:	e075      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800214c:	4b6b      	ldr	r3, [pc, #428]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	4968      	ldr	r1, [pc, #416]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002160:	e06a      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002162:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	4962      	ldr	r1, [pc, #392]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002176:	e05f      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d042      	beq.n	8002206 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002180:	4b5e      	ldr	r3, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fa02 	bl	8001594 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002194:	f7ff f9fe 	bl	8001594 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e280      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a6:	4b55      	ldr	r3, [pc, #340]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b2:	f7ff fa1f 	bl	80015f4 <HAL_GetREVID>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021bc:	4293      	cmp	r3, r2
 80021be:	d817      	bhi.n	80021f0 <HAL_RCC_OscConfig+0x3ec>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d108      	bne.n	80021da <HAL_RCC_OscConfig+0x3d6>
 80021c8:	4b4c      	ldr	r3, [pc, #304]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80021d0:	4a4a      	ldr	r2, [pc, #296]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021d6:	6053      	str	r3, [r2, #4]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021da:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	4944      	ldr	r1, [pc, #272]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
 80021ee:	e023      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
 80021f0:	4b42      	ldr	r3, [pc, #264]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	493f      	ldr	r1, [pc, #252]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3c      	ldr	r2, [pc, #240]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800220c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f9bf 	bl	8001594 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800221a:	f7ff f9bb 	bl	8001594 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e23d      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800222c:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002250:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f99c 	bl	8001594 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff f998 	bl	8001594 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e21a      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x45c>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002280:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002284:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff f982 	bl	8001594 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff f97e 	bl	8001594 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e200      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d039      	beq.n	8002332 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01c      	beq.n	8002300 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022c6:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f95f 	bl	8001594 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022da:	f7ff f95b 	bl	8001594 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1dd      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ec:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x4d6>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x52e>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002300:	4b9b      	ldr	r3, [pc, #620]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9a      	ldr	r2, [pc, #616]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002306:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800230a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230c:	f7ff f942 	bl	8001594 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002314:	f7ff f93e 	bl	8001594 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1c0      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002326:	4b92      	ldr	r3, [pc, #584]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8081 	beq.w	8002442 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002340:	4b8c      	ldr	r3, [pc, #560]	@ (8002574 <HAL_RCC_OscConfig+0x770>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a8b      	ldr	r2, [pc, #556]	@ (8002574 <HAL_RCC_OscConfig+0x770>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800234c:	f7ff f922 	bl	8001594 <HAL_GetTick>
 8002350:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002354:	f7ff f91e 	bl	8001594 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1a0      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	4b83      	ldr	r3, [pc, #524]	@ (8002574 <HAL_RCC_OscConfig+0x770>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x584>
 800237a:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237e:	4a7c      	ldr	r2, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	@ 0x70
 8002386:	e02d      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x5a6>
 8002390:	4b77      	ldr	r3, [pc, #476]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002394:	4a76      	ldr	r2, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	@ 0x70
 800239c:	4b74      	ldr	r3, [pc, #464]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a0:	4a73      	ldr	r2, [pc, #460]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c8>
 80023b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023be:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0x5e0>
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	4a67      	ldr	r2, [pc, #412]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d8:	4b65      	ldr	r3, [pc, #404]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4a64      	ldr	r2, [pc, #400]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f8d2 	bl	8001594 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7ff f8ce 	bl	8001594 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e14e      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800240a:	4b59      	ldr	r3, [pc, #356]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ee      	beq.n	80023f4 <HAL_RCC_OscConfig+0x5f0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff f8bc 	bl	8001594 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7ff f8b8 	bl	8001594 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e138      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ee      	bne.n	8002420 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 812d 	beq.w	80026a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800244c:	4b48      	ldr	r3, [pc, #288]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002454:	2b18      	cmp	r3, #24
 8002456:	f000 80bd 	beq.w	80025d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 809e 	bne.w	80025a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b42      	ldr	r3, [pc, #264]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a41      	ldr	r2, [pc, #260]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7ff f890 	bl	8001594 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f88c 	bl	8001594 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e10e      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248a:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800249a:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0x774>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4931      	ldr	r1, [pc, #196]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	3b01      	subs	r3, #1
 80024b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024be:	3b01      	subs	r3, #1
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	3b01      	subs	r3, #1
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d8:	3b01      	subs	r3, #1
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80024e0:	4923      	ldr	r1, [pc, #140]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80024e6:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <HAL_RCC_OscConfig+0x778>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	491b      	ldr	r1, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	f023 020c 	bic.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	4917      	ldr	r1, [pc, #92]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002518:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	f023 0202 	bic.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	4912      	ldr	r1, [pc, #72]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	4a10      	ldr	r2, [pc, #64]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800254c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_RCC_OscConfig+0x76c>)
 8002560:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f815 	bl	8001594 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800256c:	e011      	b.n	8002592 <HAL_RCC_OscConfig+0x78e>
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	58024800 	.word	0x58024800
 8002578:	fffffc0c 	.word	0xfffffc0c
 800257c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f808 	bl	8001594 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e08a      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x77c>
 800259e:	e082      	b.n	80026a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a42      	ldr	r2, [pc, #264]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80025a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fff2 	bl	8001594 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe ffee 	bl	8001594 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e070      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c6:	4b3a      	ldr	r3, [pc, #232]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x7b0>
 80025d2:	e068      	b.n	80026a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d031      	beq.n	800264c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d12a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d122      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	0a5b      	lsrs	r3, r3, #9
 800261a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002622:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d111      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0e1b      	lsrs	r3, r3, #24
 800263e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002646:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e02b      	b.n	80026a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002650:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 8002652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800265a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d01f      	beq.n	80026a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002672:	f7fe ff8f 	bl	8001594 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002678:	bf00      	nop
 800267a:	f7fe ff8b 	bl	8001594 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	4293      	cmp	r3, r2
 8002684:	d0f9      	beq.n	800267a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 8002688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x8b0>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002692:	00d2      	lsls	r2, r2, #3
 8002694:	4906      	ldr	r1, [pc, #24]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 8002696:	4313      	orrs	r3, r2
 8002698:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <HAL_RCC_OscConfig+0x8ac>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3730      	adds	r7, #48	@ 0x30
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58024400 	.word	0x58024400
 80026b4:	ffff0007 	.word	0xffff0007

080026b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e19c      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b8a      	ldr	r3, [pc, #552]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b87      	ldr	r3, [pc, #540]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 020f 	bic.w	r2, r3, #15
 80026e2:	4985      	ldr	r1, [pc, #532]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b83      	ldr	r3, [pc, #524]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e184      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	4b7b      	ldr	r3, [pc, #492]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002714:	429a      	cmp	r2, r3
 8002716:	d908      	bls.n	800272a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002718:	4b78      	ldr	r3, [pc, #480]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4975      	ldr	r1, [pc, #468]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002726:	4313      	orrs	r3, r2
 8002728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b70      	ldr	r3, [pc, #448]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002742:	429a      	cmp	r2, r3
 8002744:	d908      	bls.n	8002758 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002746:	4b6d      	ldr	r3, [pc, #436]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	496a      	ldr	r1, [pc, #424]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002754:	4313      	orrs	r3, r2
 8002756:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	4b64      	ldr	r3, [pc, #400]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002770:	429a      	cmp	r2, r3
 8002772:	d908      	bls.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002774:	4b61      	ldr	r3, [pc, #388]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	495e      	ldr	r1, [pc, #376]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002782:	4313      	orrs	r3, r2
 8002784:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d010      	beq.n	80027b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	4b59      	ldr	r3, [pc, #356]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800279e:	429a      	cmp	r2, r3
 80027a0:	d908      	bls.n	80027b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027a2:	4b56      	ldr	r3, [pc, #344]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4953      	ldr	r1, [pc, #332]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d908      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f023 020f 	bic.w	r2, r3, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4947      	ldr	r1, [pc, #284]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d055      	beq.n	800289a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027ee:	4b43      	ldr	r3, [pc, #268]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4940      	ldr	r1, [pc, #256]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d107      	bne.n	8002818 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002808:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d121      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0f6      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0ea      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002838:	4b30      	ldr	r3, [pc, #192]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0de      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002848:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d6      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002858:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4925      	ldr	r1, [pc, #148]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 8002866:	4313      	orrs	r3, r2
 8002868:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286a:	f7fe fe93 	bl	8001594 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002870:	e00a      	b.n	8002888 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002872:	f7fe fe8f 	bl	8001594 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0be      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002888:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	429a      	cmp	r2, r3
 8002898:	d1eb      	bne.n	8002872 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d208      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f023 020f 	bic.w	r2, r3, #15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	490e      	ldr	r1, [pc, #56]	@ (80028fc <HAL_RCC_ClockConfig+0x244>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d214      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 020f 	bic.w	r2, r3, #15
 80028de:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <HAL_RCC_ClockConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e086      	b.n	8002a06 <HAL_RCC_ClockConfig+0x34e>
 80028f8:	52002000 	.word	0x52002000
 80028fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002918:	429a      	cmp	r2, r3
 800291a:	d208      	bcs.n	800292e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800291c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4939      	ldr	r1, [pc, #228]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800292a:	4313      	orrs	r3, r2
 800292c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002946:	429a      	cmp	r2, r3
 8002948:	d208      	bcs.n	800295c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800294a:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	492e      	ldr	r1, [pc, #184]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 8002958:	4313      	orrs	r3, r2
 800295a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4922      	ldr	r1, [pc, #136]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 8002986:	4313      	orrs	r3, r2
 8002988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d010      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d208      	bcs.n	80029b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4917      	ldr	r1, [pc, #92]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029b8:	f000 f834 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4912      	ldr	r1, [pc, #72]	@ (8002a14 <HAL_RCC_ClockConfig+0x35c>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RCC_ClockConfig+0x358>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_RCC_ClockConfig+0x35c>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_RCC_ClockConfig+0x360>)
 80029ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029f0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <HAL_RCC_ClockConfig+0x364>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_RCC_ClockConfig+0x368>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fd80 	bl	8001500 <HAL_InitTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	58024400 	.word	0x58024400
 8002a14:	08005330 	.word	0x08005330
 8002a18:	24000004 	.word	0x24000004
 8002a1c:	24000000 	.word	0x24000000
 8002a20:	24000024 	.word	0x24000024

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	@ 0x24
 8002a28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2a:	4bb3      	ldr	r3, [pc, #716]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a32:	2b18      	cmp	r3, #24
 8002a34:	f200 8155 	bhi.w	8002ce2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a38:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002aa5 	.word	0x08002aa5
 8002a44:	08002ce3 	.word	0x08002ce3
 8002a48:	08002ce3 	.word	0x08002ce3
 8002a4c:	08002ce3 	.word	0x08002ce3
 8002a50:	08002ce3 	.word	0x08002ce3
 8002a54:	08002ce3 	.word	0x08002ce3
 8002a58:	08002ce3 	.word	0x08002ce3
 8002a5c:	08002ce3 	.word	0x08002ce3
 8002a60:	08002acb 	.word	0x08002acb
 8002a64:	08002ce3 	.word	0x08002ce3
 8002a68:	08002ce3 	.word	0x08002ce3
 8002a6c:	08002ce3 	.word	0x08002ce3
 8002a70:	08002ce3 	.word	0x08002ce3
 8002a74:	08002ce3 	.word	0x08002ce3
 8002a78:	08002ce3 	.word	0x08002ce3
 8002a7c:	08002ce3 	.word	0x08002ce3
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002ce3 	.word	0x08002ce3
 8002a88:	08002ce3 	.word	0x08002ce3
 8002a8c:	08002ce3 	.word	0x08002ce3
 8002a90:	08002ce3 	.word	0x08002ce3
 8002a94:	08002ce3 	.word	0x08002ce3
 8002a98:	08002ce3 	.word	0x08002ce3
 8002a9c:	08002ce3 	.word	0x08002ce3
 8002aa0:	08002ad7 	.word	0x08002ad7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa4:	4b94      	ldr	r3, [pc, #592]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ab0:	4b91      	ldr	r3, [pc, #580]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	4a90      	ldr	r2, [pc, #576]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ac2:	e111      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ac6:	61bb      	str	r3, [r7, #24]
      break;
 8002ac8:	e10e      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002aca:	4b8d      	ldr	r3, [pc, #564]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002acc:	61bb      	str	r3, [r7, #24]
      break;
 8002ace:	e10b      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ad2:	61bb      	str	r3, [r7, #24]
      break;
 8002ad4:	e108      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ad6:	4b88      	ldr	r3, [pc, #544]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ae0:	4b85      	ldr	r3, [pc, #532]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002aec:	4b82      	ldr	r3, [pc, #520]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002af6:	4b80      	ldr	r3, [pc, #512]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80e1 	beq.w	8002cdc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f000 8083 	beq.w	8002c28 <HAL_RCC_GetSysClockFreq+0x204>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f200 80a1 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x248>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x114>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d056      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b36:	e099      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b38:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b44:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	4a6b      	ldr	r2, [pc, #428]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6e:	4b62      	ldr	r3, [pc, #392]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b9e:	e087      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb2:	4b51      	ldr	r3, [pc, #324]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002be2:	e065      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c26:	e043      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c6a:	e021      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	0a5b      	lsrs	r3, r3, #9
 8002cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cba:	3301      	adds	r3, #1
 8002cbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd4:	ee17 3a90 	vmov	r3, s15
 8002cd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002cda:	e005      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
      break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ce4:	61bb      	str	r3, [r7, #24]
      break;
 8002ce6:	bf00      	nop
  }

  return sysclockfreq;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	@ 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	03d09000 	.word	0x03d09000
 8002d00:	003d0900 	.word	0x003d0900
 8002d04:	017d7840 	.word	0x017d7840
 8002d08:	46000000 	.word	0x46000000
 8002d0c:	4c742400 	.word	0x4c742400
 8002d10:	4a742400 	.word	0x4a742400
 8002d14:	4bbebc20 	.word	0x4bbebc20

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d1e:	f7ff fe81 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490f      	ldr	r1, [pc, #60]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x54>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x54>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a07      	ldr	r2, [pc, #28]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d56:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	08005330 	.word	0x08005330
 8002d70:	24000004 	.word	0x24000004
 8002d74:	24000000 	.word	0x24000000

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d7c:	f7ff ffcc 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	08005330 	.word	0x08005330

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002da8:	f7ff ffb6 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	08005330 	.word	0x08005330

08002dd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002dd4:	f7ff ffa0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4904      	ldr	r1, [pc, #16]	@ (8002df8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400
 8002df8:	08005330 	.word	0x08005330

08002dfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e04:	4ba1      	ldr	r3, [pc, #644]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	0b1b      	lsrs	r3, r3, #12
 8002e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002e26:	4b99      	ldr	r3, [pc, #612]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2a:	08db      	lsrs	r3, r3, #3
 8002e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8111 	beq.w	800306c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	f000 8083 	beq.w	8002f58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	f200 80a1 	bhi.w	8002f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d056      	beq.n	8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002e66:	e099      	b.n	8002f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e68:	4b88      	ldr	r3, [pc, #544]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02d      	beq.n	8002ed0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e74:	4b85      	ldr	r3, [pc, #532]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	4a84      	ldr	r2, [pc, #528]	@ (8003090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002ece:	e087      	b.n	8002fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003098 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ef6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f12:	e065      	b.n	8002fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800309c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f26:	4b59      	ldr	r3, [pc, #356]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f56:	e043      	b.n	8002fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80030a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6a:	4b48      	ldr	r3, [pc, #288]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f9a:	e021      	b.n	8002fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800309c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fae:	4b37      	ldr	r3, [pc, #220]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	0a5b      	lsrs	r3, r3, #9
 8002fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003006:	ee17 2a90 	vmov	r2, s15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800300e:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003028:	edd7 6a07 	vldr	s13, [r7, #28]
 800302c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003034:	ee17 2a90 	vmov	r2, s15
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	0e1b      	lsrs	r3, r3, #24
 8003042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003056:	edd7 6a07 	vldr	s13, [r7, #28]
 800305a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800305e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800306a:	e008      	b.n	800307e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	@ 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	58024400 	.word	0x58024400
 8003090:	03d09000 	.word	0x03d09000
 8003094:	46000000 	.word	0x46000000
 8003098:	4c742400 	.word	0x4c742400
 800309c:	4a742400 	.word	0x4a742400
 80030a0:	4bbebc20 	.word	0x4bbebc20

080030a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80030b6:	4b9f      	ldr	r3, [pc, #636]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	0d1b      	lsrs	r3, r3, #20
 80030bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80030c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80030ce:	4b99      	ldr	r3, [pc, #612]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8111 	beq.w	8003314 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f000 8083 	beq.w	8003200 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	f200 80a1 	bhi.w	8003244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d056      	beq.n	80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800310e:	e099      	b.n	8003244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003110:	4b88      	ldr	r3, [pc, #544]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02d      	beq.n	8003178 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800311c:	4b85      	ldr	r3, [pc, #532]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	08db      	lsrs	r3, r3, #3
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	4a84      	ldr	r2, [pc, #528]	@ (8003338 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b7b      	ldr	r3, [pc, #492]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a03 	vldr	s12, [r7, #12]
 800315a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003176:	e087      	b.n	8003288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003340 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a03 	vldr	s12, [r7, #12]
 800319e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ba:	e065      	b.n	8003288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b59      	ldr	r3, [pc, #356]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a03 	vldr	s12, [r7, #12]
 80031e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fe:	e043      	b.n	8003288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b48      	ldr	r3, [pc, #288]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a03 	vldr	s12, [r7, #12]
 8003226:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003242:	e021      	b.n	8003288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	ed97 6a03 	vldr	s12, [r7, #12]
 800326a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800326e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003286:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003288:	4b2a      	ldr	r3, [pc, #168]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	0a5b      	lsrs	r3, r3, #9
 800328e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800329e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80032a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ae:	ee17 2a90 	vmov	r2, s15
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032dc:	ee17 2a90 	vmov	r2, s15
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	0e1b      	lsrs	r3, r3, #24
 80032ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330a:	ee17 2a90 	vmov	r2, s15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003312:	e008      	b.n	8003326 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	@ 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	03d09000 	.word	0x03d09000
 800333c:	46000000 	.word	0x46000000
 8003340:	4c742400 	.word	0x4c742400
 8003344:	4a742400 	.word	0x4a742400
 8003348:	4bbebc20 	.word	0x4bbebc20

0800334c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e049      	b.n	80033f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fd64 	bl	8000e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fb8c 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_TIM_PWM_Start+0x24>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e03c      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d109      	bne.n	800343a <HAL_TIM_PWM_Start+0x3e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e02f      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x58>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e022      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d109      	bne.n	800346e <HAL_TIM_PWM_Start+0x72>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e015      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b10      	cmp	r3, #16
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x8c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e008      	b.n	800349a <HAL_TIM_PWM_Start+0x9e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0a1      	b.n	80035e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xb6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b0:	e023      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xc6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c0:	e01b      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start+0xd6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d0:	e013      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_PWM_Start+0xe6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034e0:	e00b      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_PWM_Start+0xf6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f0:	e003      	b.n	80034fa <HAL_TIM_PWM_Start+0xfe>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fe46 	bl	8004194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a38      	ldr	r2, [pc, #224]	@ (80035f0 <HAL_TIM_PWM_Start+0x1f4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_TIM_PWM_Start+0x13e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a37      	ldr	r2, [pc, #220]	@ (80035f4 <HAL_TIM_PWM_Start+0x1f8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_TIM_PWM_Start+0x13e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a35      	ldr	r2, [pc, #212]	@ (80035f8 <HAL_TIM_PWM_Start+0x1fc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_TIM_PWM_Start+0x13e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a34      	ldr	r2, [pc, #208]	@ (80035fc <HAL_TIM_PWM_Start+0x200>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_TIM_PWM_Start+0x13e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_TIM_PWM_Start+0x204>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_Start+0x142>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_TIM_PWM_Start+0x144>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <HAL_TIM_PWM_Start+0x1f4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003566:	d01d      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a25      	ldr	r2, [pc, #148]	@ (8003604 <HAL_TIM_PWM_Start+0x208>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <HAL_TIM_PWM_Start+0x20c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a22      	ldr	r2, [pc, #136]	@ (800360c <HAL_TIM_PWM_Start+0x210>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1a      	ldr	r2, [pc, #104]	@ (80035f4 <HAL_TIM_PWM_Start+0x1f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <HAL_TIM_PWM_Start+0x214>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_PWM_Start+0x1a8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <HAL_TIM_PWM_Start+0x1fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d115      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_TIM_PWM_Start+0x218>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d015      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x1e6>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d011      	beq.n	80035e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40010400 	.word	0x40010400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40001800 	.word	0x40001800
 8003614:	00010007 	.word	0x00010007

08003618 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e08f      	b.n	800374c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fd fc1d 	bl	8000e80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b3e      	ldr	r3, [pc, #248]	@ (8003754 <HAL_TIM_Encoder_Init+0x13c>)
 800365a:	400b      	ands	r3, r1
 800365c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f000 fa1d 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_TIM_Encoder_Init+0x140>)
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_TIM_Encoder_Init+0x144>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_TIM_Encoder_Init+0x148>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4313      	orrs	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	011a      	lsls	r2, r3, #4
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	4313      	orrs	r3, r2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4313      	orrs	r3, r2
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fffebff8 	.word	0xfffebff8
 8003758:	fffffcfc 	.word	0xfffffcfc
 800375c:	fffff3f3 	.word	0xfffff3f3
 8003760:	ffff0f0f 	.word	0xffff0f0f

08003764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003774:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800377c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003784:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d110      	bne.n	80037b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800379a:	7b7b      	ldrb	r3, [r7, #13]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d001      	beq.n	80037a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e069      	b.n	8003878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b4:	e031      	b.n	800381a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d110      	bne.n	80037de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037bc:	7bbb      	ldrb	r3, [r7, #14]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037c2:	7b3b      	ldrb	r3, [r7, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e055      	b.n	8003878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037dc:	e01d      	b.n	800381a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	7b7b      	ldrb	r3, [r7, #13]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f0:	7b3b      	ldrb	r3, [r7, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e03e      	b.n	8003878 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_TIM_Encoder_Start+0xc4>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d008      	beq.n	8003838 <HAL_TIM_Encoder_Start+0xd4>
 8003826:	e00f      	b.n	8003848 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fcaf 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003836:	e016      	b.n	8003866 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2201      	movs	r2, #1
 800383e:	2104      	movs	r1, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fca7 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003846:	e00e      	b.n	8003866 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2201      	movs	r2, #1
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fc9f 	bl	8004194 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	2104      	movs	r1, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fc98 	bl	8004194 <TIM_CCxChannelCmd>
      break;
 8003864:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800389a:	2302      	movs	r3, #2
 800389c:	e0ff      	b.n	8003a9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b14      	cmp	r3, #20
 80038aa:	f200 80f0 	bhi.w	8003a8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003a8f 	.word	0x08003a8f
 80038bc:	08003a8f 	.word	0x08003a8f
 80038c0:	08003a8f 	.word	0x08003a8f
 80038c4:	08003949 	.word	0x08003949
 80038c8:	08003a8f 	.word	0x08003a8f
 80038cc:	08003a8f 	.word	0x08003a8f
 80038d0:	08003a8f 	.word	0x08003a8f
 80038d4:	0800398b 	.word	0x0800398b
 80038d8:	08003a8f 	.word	0x08003a8f
 80038dc:	08003a8f 	.word	0x08003a8f
 80038e0:	08003a8f 	.word	0x08003a8f
 80038e4:	080039cb 	.word	0x080039cb
 80038e8:	08003a8f 	.word	0x08003a8f
 80038ec:	08003a8f 	.word	0x08003a8f
 80038f0:	08003a8f 	.word	0x08003a8f
 80038f4:	08003a0d 	.word	0x08003a0d
 80038f8:	08003a8f 	.word	0x08003a8f
 80038fc:	08003a8f 	.word	0x08003a8f
 8003900:	08003a8f 	.word	0x08003a8f
 8003904:	08003a4d 	.word	0x08003a4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f96a 	bl	8003be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0208 	orr.w	r2, r2, #8
 8003922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6999      	ldr	r1, [r3, #24]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
      break;
 8003946:	e0a5      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f9da 	bl	8003d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
      break;
 8003988:	e084      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fa43 	bl	8003e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0208 	orr.w	r2, r2, #8
 80039a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0204 	bic.w	r2, r2, #4
 80039b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69d9      	ldr	r1, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
      break;
 80039c8:	e064      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 faab 	bl	8003f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	021a      	lsls	r2, r3, #8
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	61da      	str	r2, [r3, #28]
      break;
 8003a0a:	e043      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 faf4 	bl	8004000 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a4a:	e023      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb38 	bl	80040c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a8c:	e002      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a43      	ldr	r2, [pc, #268]	@ (8003bc8 <TIM_Base_SetConfig+0x120>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a40      	ldr	r2, [pc, #256]	@ (8003bcc <TIM_Base_SetConfig+0x124>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd0 <TIM_Base_SetConfig+0x128>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a32      	ldr	r2, [pc, #200]	@ (8003bc8 <TIM_Base_SetConfig+0x120>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d01b      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <TIM_Base_SetConfig+0x124>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d017      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd0 <TIM_Base_SetConfig+0x128>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <TIM_Base_SetConfig+0x134>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <TIM_Base_SetConfig+0x138>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	@ (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <TIM_Base_SetConfig+0x120>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00f      	beq.n	8003b9a <TIM_Base_SetConfig+0xf2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0xf2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <TIM_Base_SetConfig+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0xf2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <TIM_Base_SetConfig+0x138>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0xf2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d103      	bne.n	8003ba2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f043 0204 	orr.w	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40010400 	.word	0x40010400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800

08003be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0201 	bic.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <TIM_OC1_SetConfig+0x108>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 0302 	bic.w	r3, r3, #2
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <TIM_OC1_SetConfig+0x10c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00f      	beq.n	8003c64 <TIM_OC1_SetConfig+0x7c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <TIM_OC1_SetConfig+0x110>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_OC1_SetConfig+0x7c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <TIM_OC1_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_OC1_SetConfig+0x7c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <TIM_OC1_SetConfig+0x118>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_OC1_SetConfig+0x7c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <TIM_OC1_SetConfig+0x11c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10c      	bne.n	8003c7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0308 	bic.w	r3, r3, #8
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf4 <TIM_OC1_SetConfig+0x10c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00f      	beq.n	8003ca6 <TIM_OC1_SetConfig+0xbe>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <TIM_OC1_SetConfig+0x110>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00b      	beq.n	8003ca6 <TIM_OC1_SetConfig+0xbe>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <TIM_OC1_SetConfig+0x114>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <TIM_OC1_SetConfig+0xbe>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <TIM_OC1_SetConfig+0x118>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_OC1_SetConfig+0xbe>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <TIM_OC1_SetConfig+0x11c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d111      	bne.n	8003cca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	621a      	str	r2, [r3, #32]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	fffeff8f 	.word	0xfffeff8f
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40010400 	.word	0x40010400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0210 	bic.w	r2, r3, #16
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <TIM_OC2_SetConfig+0xfc>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0320 	bic.w	r3, r3, #32
 8003d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <TIM_OC2_SetConfig+0x100>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC2_SetConfig+0x68>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <TIM_OC2_SetConfig+0x104>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10d      	bne.n	8003d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <TIM_OC2_SetConfig+0x100>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00f      	beq.n	8003db4 <TIM_OC2_SetConfig+0xac>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <TIM_OC2_SetConfig+0x104>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_OC2_SetConfig+0xac>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <TIM_OC2_SetConfig+0x108>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_OC2_SetConfig+0xac>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC2_SetConfig+0x10c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_OC2_SetConfig+0xac>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_OC2_SetConfig+0x110>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d113      	bne.n	8003ddc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	feff8fff 	.word	0xfeff8fff
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800

08003e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4b33      	ldr	r3, [pc, #204]	@ (8003f14 <TIM_OC3_SetConfig+0xf8>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a28      	ldr	r2, [pc, #160]	@ (8003f18 <TIM_OC3_SetConfig+0xfc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_OC3_SetConfig+0x66>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a27      	ldr	r2, [pc, #156]	@ (8003f1c <TIM_OC3_SetConfig+0x100>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10d      	bne.n	8003e9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <TIM_OC3_SetConfig+0xfc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00f      	beq.n	8003ec6 <TIM_OC3_SetConfig+0xaa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <TIM_OC3_SetConfig+0x100>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_OC3_SetConfig+0xaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <TIM_OC3_SetConfig+0x104>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_OC3_SetConfig+0xaa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <TIM_OC3_SetConfig+0x108>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_OC3_SetConfig+0xaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <TIM_OC3_SetConfig+0x10c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d113      	bne.n	8003eee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	fffeff8f 	.word	0xfffeff8f
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40010400 	.word	0x40010400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <TIM_OC4_SetConfig+0xbc>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a19      	ldr	r2, [pc, #100]	@ (8003fec <TIM_OC4_SetConfig+0xc0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00f      	beq.n	8003fac <TIM_OC4_SetConfig+0x80>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <TIM_OC4_SetConfig+0xc4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00b      	beq.n	8003fac <TIM_OC4_SetConfig+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <TIM_OC4_SetConfig+0xc8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <TIM_OC4_SetConfig+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ff8 <TIM_OC4_SetConfig+0xcc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC4_SetConfig+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <TIM_OC4_SetConfig+0xd0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d109      	bne.n	8003fc0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	feff8fff 	.word	0xfeff8fff
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800

08004000 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4b21      	ldr	r3, [pc, #132]	@ (80040b0 <TIM_OC5_SetConfig+0xb0>)
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <TIM_OC5_SetConfig+0xb4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_OC5_SetConfig+0x76>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <TIM_OC5_SetConfig+0xb8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_OC5_SetConfig+0x76>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <TIM_OC5_SetConfig+0xbc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_OC5_SetConfig+0x76>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <TIM_OC5_SetConfig+0xc0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC5_SetConfig+0x76>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <TIM_OC5_SetConfig+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d109      	bne.n	800408a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	fffeff8f 	.word	0xfffeff8f
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4b22      	ldr	r3, [pc, #136]	@ (800417c <TIM_OC6_SetConfig+0xb4>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	051b      	lsls	r3, r3, #20
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <TIM_OC6_SetConfig+0xb8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00f      	beq.n	8004140 <TIM_OC6_SetConfig+0x78>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <TIM_OC6_SetConfig+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC6_SetConfig+0x78>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <TIM_OC6_SetConfig+0xc0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC6_SetConfig+0x78>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	@ (800418c <TIM_OC6_SetConfig+0xc4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC6_SetConfig+0x78>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a15      	ldr	r2, [pc, #84]	@ (8004190 <TIM_OC6_SetConfig+0xc8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	feff8fff 	.word	0xfeff8fff
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2201      	movs	r2, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06d      	b.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a30      	ldr	r2, [pc, #192]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	@ (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426a:	d01d      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1a      	ldr	r2, [pc, #104]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a15      	ldr	r2, [pc, #84]	@ (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10c      	bne.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40001800 	.word	0x40001800
 80042f8:	40014000 	.word	0x40014000

080042fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e042      	b.n	8004394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f83b 	bl	800439c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	@ 0x24
 800432a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fd9a 	bl	8004e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f82f 	bl	80043b0 <UART_SetConfig>
 8004352:	4603      	mov	r3, r0
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e01b      	b.n	8004394 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800436a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800437a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fe19 	bl	8004fc4 <UART_CheckIdleState>
 8004392:	4603      	mov	r3, r0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b092      	sub	sp, #72	@ 0x48
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4bbe      	ldr	r3, [pc, #760]	@ (80046d8 <UART_SetConfig+0x328>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4ab3      	ldr	r2, [pc, #716]	@ (80046dc <UART_SetConfig+0x32c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004418:	4313      	orrs	r3, r2
 800441a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	4baf      	ldr	r3, [pc, #700]	@ (80046e0 <UART_SetConfig+0x330>)
 8004424:	4013      	ands	r3, r2
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800442c:	430b      	orrs	r3, r1
 800442e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	f023 010f 	bic.w	r1, r3, #15
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4aa6      	ldr	r2, [pc, #664]	@ (80046e4 <UART_SetConfig+0x334>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d177      	bne.n	8004540 <UART_SetConfig+0x190>
 8004450:	4ba5      	ldr	r3, [pc, #660]	@ (80046e8 <UART_SetConfig+0x338>)
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004458:	2b28      	cmp	r3, #40	@ 0x28
 800445a:	d86d      	bhi.n	8004538 <UART_SetConfig+0x188>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0xb4>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004509 	.word	0x08004509
 8004468:	08004539 	.word	0x08004539
 800446c:	08004539 	.word	0x08004539
 8004470:	08004539 	.word	0x08004539
 8004474:	08004539 	.word	0x08004539
 8004478:	08004539 	.word	0x08004539
 800447c:	08004539 	.word	0x08004539
 8004480:	08004539 	.word	0x08004539
 8004484:	08004511 	.word	0x08004511
 8004488:	08004539 	.word	0x08004539
 800448c:	08004539 	.word	0x08004539
 8004490:	08004539 	.word	0x08004539
 8004494:	08004539 	.word	0x08004539
 8004498:	08004539 	.word	0x08004539
 800449c:	08004539 	.word	0x08004539
 80044a0:	08004539 	.word	0x08004539
 80044a4:	08004519 	.word	0x08004519
 80044a8:	08004539 	.word	0x08004539
 80044ac:	08004539 	.word	0x08004539
 80044b0:	08004539 	.word	0x08004539
 80044b4:	08004539 	.word	0x08004539
 80044b8:	08004539 	.word	0x08004539
 80044bc:	08004539 	.word	0x08004539
 80044c0:	08004539 	.word	0x08004539
 80044c4:	08004521 	.word	0x08004521
 80044c8:	08004539 	.word	0x08004539
 80044cc:	08004539 	.word	0x08004539
 80044d0:	08004539 	.word	0x08004539
 80044d4:	08004539 	.word	0x08004539
 80044d8:	08004539 	.word	0x08004539
 80044dc:	08004539 	.word	0x08004539
 80044e0:	08004539 	.word	0x08004539
 80044e4:	08004529 	.word	0x08004529
 80044e8:	08004539 	.word	0x08004539
 80044ec:	08004539 	.word	0x08004539
 80044f0:	08004539 	.word	0x08004539
 80044f4:	08004539 	.word	0x08004539
 80044f8:	08004539 	.word	0x08004539
 80044fc:	08004539 	.word	0x08004539
 8004500:	08004539 	.word	0x08004539
 8004504:	08004531 	.word	0x08004531
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450e:	e222      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004516:	e21e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800451e:	e21a      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004526:	e216      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004528:	2320      	movs	r3, #32
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452e:	e212      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004530:	2340      	movs	r3, #64	@ 0x40
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e20e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e20a      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a69      	ldr	r2, [pc, #420]	@ (80046ec <UART_SetConfig+0x33c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d130      	bne.n	80045ac <UART_SetConfig+0x1fc>
 800454a:	4b67      	ldr	r3, [pc, #412]	@ (80046e8 <UART_SetConfig+0x338>)
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b05      	cmp	r3, #5
 8004554:	d826      	bhi.n	80045a4 <UART_SetConfig+0x1f4>
 8004556:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <UART_SetConfig+0x1ac>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	08004575 	.word	0x08004575
 8004560:	0800457d 	.word	0x0800457d
 8004564:	08004585 	.word	0x08004585
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	2300      	movs	r3, #0
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457a:	e1ec      	b.n	8004956 <UART_SetConfig+0x5a6>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004582:	e1e8      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458a:	e1e4      	b.n	8004956 <UART_SetConfig+0x5a6>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004592:	e1e0      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004594:	2320      	movs	r3, #32
 8004596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459a:	e1dc      	b.n	8004956 <UART_SetConfig+0x5a6>
 800459c:	2340      	movs	r3, #64	@ 0x40
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e1d8      	b.n	8004956 <UART_SetConfig+0x5a6>
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e1d4      	b.n	8004956 <UART_SetConfig+0x5a6>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4f      	ldr	r2, [pc, #316]	@ (80046f0 <UART_SetConfig+0x340>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d130      	bne.n	8004618 <UART_SetConfig+0x268>
 80045b6:	4b4c      	ldr	r3, [pc, #304]	@ (80046e8 <UART_SetConfig+0x338>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b05      	cmp	r3, #5
 80045c0:	d826      	bhi.n	8004610 <UART_SetConfig+0x260>
 80045c2:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0x218>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045e1 	.word	0x080045e1
 80045cc:	080045e9 	.word	0x080045e9
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004609 	.word	0x08004609
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e6:	e1b6      	b.n	8004956 <UART_SetConfig+0x5a6>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ee:	e1b2      	b.n	8004956 <UART_SetConfig+0x5a6>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f6:	e1ae      	b.n	8004956 <UART_SetConfig+0x5a6>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fe:	e1aa      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004600:	2320      	movs	r3, #32
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004606:	e1a6      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004608:	2340      	movs	r3, #64	@ 0x40
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e1a2      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e19e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a35      	ldr	r2, [pc, #212]	@ (80046f4 <UART_SetConfig+0x344>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d130      	bne.n	8004684 <UART_SetConfig+0x2d4>
 8004622:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <UART_SetConfig+0x338>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b05      	cmp	r3, #5
 800462c:	d826      	bhi.n	800467c <UART_SetConfig+0x2cc>
 800462e:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <UART_SetConfig+0x284>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	0800464d 	.word	0x0800464d
 8004638:	08004655 	.word	0x08004655
 800463c:	0800465d 	.word	0x0800465d
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004652:	e180      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800465a:	e17c      	b.n	8004956 <UART_SetConfig+0x5a6>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004662:	e178      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466a:	e174      	b.n	8004956 <UART_SetConfig+0x5a6>
 800466c:	2320      	movs	r3, #32
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e170      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004674:	2340      	movs	r3, #64	@ 0x40
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e16c      	b.n	8004956 <UART_SetConfig+0x5a6>
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e168      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1b      	ldr	r2, [pc, #108]	@ (80046f8 <UART_SetConfig+0x348>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d142      	bne.n	8004714 <UART_SetConfig+0x364>
 800468e:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <UART_SetConfig+0x338>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b05      	cmp	r3, #5
 8004698:	d838      	bhi.n	800470c <UART_SetConfig+0x35c>
 800469a:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <UART_SetConfig+0x2f0>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046c1 	.word	0x080046c1
 80046a8:	080046c9 	.word	0x080046c9
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	08004705 	.word	0x08004705
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e14a      	b.n	8004956 <UART_SetConfig+0x5a6>
 80046c0:	2304      	movs	r3, #4
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c6:	e146      	b.n	8004956 <UART_SetConfig+0x5a6>
 80046c8:	2308      	movs	r3, #8
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ce:	e142      	b.n	8004956 <UART_SetConfig+0x5a6>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e13e      	b.n	8004956 <UART_SetConfig+0x5a6>
 80046d8:	cfff69f3 	.word	0xcfff69f3
 80046dc:	58000c00 	.word	0x58000c00
 80046e0:	11fff4ff 	.word	0x11fff4ff
 80046e4:	40011000 	.word	0x40011000
 80046e8:	58024400 	.word	0x58024400
 80046ec:	40004400 	.word	0x40004400
 80046f0:	40004800 	.word	0x40004800
 80046f4:	40004c00 	.word	0x40004c00
 80046f8:	40005000 	.word	0x40005000
 80046fc:	2320      	movs	r3, #32
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e128      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004704:	2340      	movs	r3, #64	@ 0x40
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470a:	e124      	b.n	8004956 <UART_SetConfig+0x5a6>
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004712:	e120      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4acb      	ldr	r2, [pc, #812]	@ (8004a48 <UART_SetConfig+0x698>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d176      	bne.n	800480c <UART_SetConfig+0x45c>
 800471e:	4bcb      	ldr	r3, [pc, #812]	@ (8004a4c <UART_SetConfig+0x69c>)
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004726:	2b28      	cmp	r3, #40	@ 0x28
 8004728:	d86c      	bhi.n	8004804 <UART_SetConfig+0x454>
 800472a:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <UART_SetConfig+0x380>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	080047d5 	.word	0x080047d5
 8004734:	08004805 	.word	0x08004805
 8004738:	08004805 	.word	0x08004805
 800473c:	08004805 	.word	0x08004805
 8004740:	08004805 	.word	0x08004805
 8004744:	08004805 	.word	0x08004805
 8004748:	08004805 	.word	0x08004805
 800474c:	08004805 	.word	0x08004805
 8004750:	080047dd 	.word	0x080047dd
 8004754:	08004805 	.word	0x08004805
 8004758:	08004805 	.word	0x08004805
 800475c:	08004805 	.word	0x08004805
 8004760:	08004805 	.word	0x08004805
 8004764:	08004805 	.word	0x08004805
 8004768:	08004805 	.word	0x08004805
 800476c:	08004805 	.word	0x08004805
 8004770:	080047e5 	.word	0x080047e5
 8004774:	08004805 	.word	0x08004805
 8004778:	08004805 	.word	0x08004805
 800477c:	08004805 	.word	0x08004805
 8004780:	08004805 	.word	0x08004805
 8004784:	08004805 	.word	0x08004805
 8004788:	08004805 	.word	0x08004805
 800478c:	08004805 	.word	0x08004805
 8004790:	080047ed 	.word	0x080047ed
 8004794:	08004805 	.word	0x08004805
 8004798:	08004805 	.word	0x08004805
 800479c:	08004805 	.word	0x08004805
 80047a0:	08004805 	.word	0x08004805
 80047a4:	08004805 	.word	0x08004805
 80047a8:	08004805 	.word	0x08004805
 80047ac:	08004805 	.word	0x08004805
 80047b0:	080047f5 	.word	0x080047f5
 80047b4:	08004805 	.word	0x08004805
 80047b8:	08004805 	.word	0x08004805
 80047bc:	08004805 	.word	0x08004805
 80047c0:	08004805 	.word	0x08004805
 80047c4:	08004805 	.word	0x08004805
 80047c8:	08004805 	.word	0x08004805
 80047cc:	08004805 	.word	0x08004805
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e0bc      	b.n	8004956 <UART_SetConfig+0x5a6>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e2:	e0b8      	b.n	8004956 <UART_SetConfig+0x5a6>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ea:	e0b4      	b.n	8004956 <UART_SetConfig+0x5a6>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f2:	e0b0      	b.n	8004956 <UART_SetConfig+0x5a6>
 80047f4:	2320      	movs	r3, #32
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e0ac      	b.n	8004956 <UART_SetConfig+0x5a6>
 80047fc:	2340      	movs	r3, #64	@ 0x40
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004802:	e0a8      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480a:	e0a4      	b.n	8004956 <UART_SetConfig+0x5a6>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a8f      	ldr	r2, [pc, #572]	@ (8004a50 <UART_SetConfig+0x6a0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d130      	bne.n	8004878 <UART_SetConfig+0x4c8>
 8004816:	4b8d      	ldr	r3, [pc, #564]	@ (8004a4c <UART_SetConfig+0x69c>)
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b05      	cmp	r3, #5
 8004820:	d826      	bhi.n	8004870 <UART_SetConfig+0x4c0>
 8004822:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <UART_SetConfig+0x478>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004841 	.word	0x08004841
 800482c:	08004849 	.word	0x08004849
 8004830:	08004851 	.word	0x08004851
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004846:	e086      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484e:	e082      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004856:	e07e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485e:	e07a      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004860:	2320      	movs	r3, #32
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e076      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004868:	2340      	movs	r3, #64	@ 0x40
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e072      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e06e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a75      	ldr	r2, [pc, #468]	@ (8004a54 <UART_SetConfig+0x6a4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d130      	bne.n	80048e4 <UART_SetConfig+0x534>
 8004882:	4b72      	ldr	r3, [pc, #456]	@ (8004a4c <UART_SetConfig+0x69c>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b05      	cmp	r3, #5
 800488c:	d826      	bhi.n	80048dc <UART_SetConfig+0x52c>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <UART_SetConfig+0x4e4>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048b5 	.word	0x080048b5
 800489c:	080048bd 	.word	0x080048bd
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b2:	e050      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	e04c      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c2:	e048      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ca:	e044      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048cc:	2320      	movs	r3, #32
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e040      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048d4:	2340      	movs	r3, #64	@ 0x40
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e03c      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e038      	b.n	8004956 <UART_SetConfig+0x5a6>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5b      	ldr	r2, [pc, #364]	@ (8004a58 <UART_SetConfig+0x6a8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d130      	bne.n	8004950 <UART_SetConfig+0x5a0>
 80048ee:	4b57      	ldr	r3, [pc, #348]	@ (8004a4c <UART_SetConfig+0x69c>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d826      	bhi.n	8004948 <UART_SetConfig+0x598>
 80048fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <UART_SetConfig+0x550>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004919 	.word	0x08004919
 8004904:	08004921 	.word	0x08004921
 8004908:	08004929 	.word	0x08004929
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	2302      	movs	r3, #2
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491e:	e01a      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004926:	e016      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492e:	e012      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e00e      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e00a      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004940:	2340      	movs	r3, #64	@ 0x40
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e006      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e002      	b.n	8004956 <UART_SetConfig+0x5a6>
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a58 <UART_SetConfig+0x6a8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	f040 80f8 	bne.w	8004b52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004962:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004966:	2b20      	cmp	r3, #32
 8004968:	dc46      	bgt.n	80049f8 <UART_SetConfig+0x648>
 800496a:	2b02      	cmp	r3, #2
 800496c:	f2c0 8082 	blt.w	8004a74 <UART_SetConfig+0x6c4>
 8004970:	3b02      	subs	r3, #2
 8004972:	2b1e      	cmp	r3, #30
 8004974:	d87e      	bhi.n	8004a74 <UART_SetConfig+0x6c4>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x5cc>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049ff 	.word	0x080049ff
 8004980:	08004a75 	.word	0x08004a75
 8004984:	08004a07 	.word	0x08004a07
 8004988:	08004a75 	.word	0x08004a75
 800498c:	08004a75 	.word	0x08004a75
 8004990:	08004a75 	.word	0x08004a75
 8004994:	08004a17 	.word	0x08004a17
 8004998:	08004a75 	.word	0x08004a75
 800499c:	08004a75 	.word	0x08004a75
 80049a0:	08004a75 	.word	0x08004a75
 80049a4:	08004a75 	.word	0x08004a75
 80049a8:	08004a75 	.word	0x08004a75
 80049ac:	08004a75 	.word	0x08004a75
 80049b0:	08004a75 	.word	0x08004a75
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a75 	.word	0x08004a75
 80049bc:	08004a75 	.word	0x08004a75
 80049c0:	08004a75 	.word	0x08004a75
 80049c4:	08004a75 	.word	0x08004a75
 80049c8:	08004a75 	.word	0x08004a75
 80049cc:	08004a75 	.word	0x08004a75
 80049d0:	08004a75 	.word	0x08004a75
 80049d4:	08004a75 	.word	0x08004a75
 80049d8:	08004a75 	.word	0x08004a75
 80049dc:	08004a75 	.word	0x08004a75
 80049e0:	08004a75 	.word	0x08004a75
 80049e4:	08004a75 	.word	0x08004a75
 80049e8:	08004a75 	.word	0x08004a75
 80049ec:	08004a75 	.word	0x08004a75
 80049f0:	08004a75 	.word	0x08004a75
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d037      	beq.n	8004a6c <UART_SetConfig+0x6bc>
 80049fc:	e03a      	b.n	8004a74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80049fe:	f7fe f9e7 	bl	8002dd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a04:	e03c      	b.n	8004a80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f9f6 	bl	8002dfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a14:	e034      	b.n	8004a80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a16:	f107 0318 	add.w	r3, r7, #24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fb42 	bl	80030a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a24:	e02c      	b.n	8004a80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <UART_SetConfig+0x69c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <UART_SetConfig+0x69c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	08db      	lsrs	r3, r3, #3
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	4a07      	ldr	r2, [pc, #28]	@ (8004a5c <UART_SetConfig+0x6ac>)
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a44:	e01c      	b.n	8004a80 <UART_SetConfig+0x6d0>
 8004a46:	bf00      	nop
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	40007800 	.word	0x40007800
 8004a54:	40007c00 	.word	0x40007c00
 8004a58:	58000c00 	.word	0x58000c00
 8004a5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b9d      	ldr	r3, [pc, #628]	@ (8004cd8 <UART_SetConfig+0x928>)
 8004a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a64:	e00c      	b.n	8004a80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a66:	4b9d      	ldr	r3, [pc, #628]	@ (8004cdc <UART_SetConfig+0x92c>)
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a6a:	e009      	b.n	8004a80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a72:	e005      	b.n	8004a80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 81de 	beq.w	8004e44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	4a94      	ldr	r2, [pc, #592]	@ (8004ce0 <UART_SetConfig+0x930>)
 8004a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d305      	bcc.n	8004ab8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d903      	bls.n	8004ac0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004abe:	e1c1      	b.n	8004e44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	4a84      	ldr	r2, [pc, #528]	@ (8004ce0 <UART_SetConfig+0x930>)
 8004ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ae2:	f7fb fbf9 	bl	80002d8 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	020b      	lsls	r3, r1, #8
 8004af8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004afc:	0202      	lsls	r2, r0, #8
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	6849      	ldr	r1, [r1, #4]
 8004b02:	0849      	lsrs	r1, r1, #1
 8004b04:	2000      	movs	r0, #0
 8004b06:	460c      	mov	r4, r1
 8004b08:	4605      	mov	r5, r0
 8004b0a:	eb12 0804 	adds.w	r8, r2, r4
 8004b0e:	eb43 0905 	adc.w	r9, r3, r5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	469a      	mov	sl, r3
 8004b1a:	4693      	mov	fp, r2
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	465b      	mov	r3, fp
 8004b20:	4640      	mov	r0, r8
 8004b22:	4649      	mov	r1, r9
 8004b24:	f7fb fbd8 	bl	80002d8 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b36:	d308      	bcc.n	8004b4a <UART_SetConfig+0x79a>
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3e:	d204      	bcs.n	8004b4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	e17c      	b.n	8004e44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b50:	e178      	b.n	8004e44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5a:	f040 80c5 	bne.w	8004ce8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004b5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	dc48      	bgt.n	8004bf8 <UART_SetConfig+0x848>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db7b      	blt.n	8004c62 <UART_SetConfig+0x8b2>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d879      	bhi.n	8004c62 <UART_SetConfig+0x8b2>
 8004b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <UART_SetConfig+0x7c4>)
 8004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b74:	08004bff 	.word	0x08004bff
 8004b78:	08004c07 	.word	0x08004c07
 8004b7c:	08004c63 	.word	0x08004c63
 8004b80:	08004c63 	.word	0x08004c63
 8004b84:	08004c0f 	.word	0x08004c0f
 8004b88:	08004c63 	.word	0x08004c63
 8004b8c:	08004c63 	.word	0x08004c63
 8004b90:	08004c63 	.word	0x08004c63
 8004b94:	08004c1f 	.word	0x08004c1f
 8004b98:	08004c63 	.word	0x08004c63
 8004b9c:	08004c63 	.word	0x08004c63
 8004ba0:	08004c63 	.word	0x08004c63
 8004ba4:	08004c63 	.word	0x08004c63
 8004ba8:	08004c63 	.word	0x08004c63
 8004bac:	08004c63 	.word	0x08004c63
 8004bb0:	08004c63 	.word	0x08004c63
 8004bb4:	08004c2f 	.word	0x08004c2f
 8004bb8:	08004c63 	.word	0x08004c63
 8004bbc:	08004c63 	.word	0x08004c63
 8004bc0:	08004c63 	.word	0x08004c63
 8004bc4:	08004c63 	.word	0x08004c63
 8004bc8:	08004c63 	.word	0x08004c63
 8004bcc:	08004c63 	.word	0x08004c63
 8004bd0:	08004c63 	.word	0x08004c63
 8004bd4:	08004c63 	.word	0x08004c63
 8004bd8:	08004c63 	.word	0x08004c63
 8004bdc:	08004c63 	.word	0x08004c63
 8004be0:	08004c63 	.word	0x08004c63
 8004be4:	08004c63 	.word	0x08004c63
 8004be8:	08004c63 	.word	0x08004c63
 8004bec:	08004c63 	.word	0x08004c63
 8004bf0:	08004c63 	.word	0x08004c63
 8004bf4:	08004c55 	.word	0x08004c55
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d02e      	beq.n	8004c5a <UART_SetConfig+0x8aa>
 8004bfc:	e031      	b.n	8004c62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfe:	f7fe f8bb 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c04:	e033      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c06:	f7fe f8cd 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8004c0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c0c:	e02f      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f8f2 	bl	8002dfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c1c:	e027      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c1e:	f107 0318 	add.w	r3, r7, #24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fa3e 	bl	80030a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c2c:	e01f      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce4 <UART_SetConfig+0x934>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <UART_SetConfig+0x934>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	08db      	lsrs	r3, r3, #3
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	4a24      	ldr	r2, [pc, #144]	@ (8004cd8 <UART_SetConfig+0x928>)
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c4c:	e00f      	b.n	8004c6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c4e:	4b22      	ldr	r3, [pc, #136]	@ (8004cd8 <UART_SetConfig+0x928>)
 8004c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c52:	e00c      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c54:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <UART_SetConfig+0x92c>)
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c58:	e009      	b.n	8004c6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c60:	e005      	b.n	8004c6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80e7 	beq.w	8004e44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ce0 <UART_SetConfig+0x930>)
 8004c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c80:	461a      	mov	r2, r3
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c88:	005a      	lsls	r2, r3, #1
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	441a      	add	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d916      	bls.n	8004cd0 <UART_SetConfig+0x920>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d212      	bcs.n	8004cd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f023 030f 	bic.w	r3, r3, #15
 8004cb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e0b9      	b.n	8004e44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004cd6:	e0b5      	b.n	8004e44 <UART_SetConfig+0xa94>
 8004cd8:	03d09000 	.word	0x03d09000
 8004cdc:	003d0900 	.word	0x003d0900
 8004ce0:	0800534c 	.word	0x0800534c
 8004ce4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	dc49      	bgt.n	8004d84 <UART_SetConfig+0x9d4>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	db7c      	blt.n	8004dee <UART_SetConfig+0xa3e>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d87a      	bhi.n	8004dee <UART_SetConfig+0xa3e>
 8004cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <UART_SetConfig+0x950>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d8b 	.word	0x08004d8b
 8004d04:	08004d93 	.word	0x08004d93
 8004d08:	08004def 	.word	0x08004def
 8004d0c:	08004def 	.word	0x08004def
 8004d10:	08004d9b 	.word	0x08004d9b
 8004d14:	08004def 	.word	0x08004def
 8004d18:	08004def 	.word	0x08004def
 8004d1c:	08004def 	.word	0x08004def
 8004d20:	08004dab 	.word	0x08004dab
 8004d24:	08004def 	.word	0x08004def
 8004d28:	08004def 	.word	0x08004def
 8004d2c:	08004def 	.word	0x08004def
 8004d30:	08004def 	.word	0x08004def
 8004d34:	08004def 	.word	0x08004def
 8004d38:	08004def 	.word	0x08004def
 8004d3c:	08004def 	.word	0x08004def
 8004d40:	08004dbb 	.word	0x08004dbb
 8004d44:	08004def 	.word	0x08004def
 8004d48:	08004def 	.word	0x08004def
 8004d4c:	08004def 	.word	0x08004def
 8004d50:	08004def 	.word	0x08004def
 8004d54:	08004def 	.word	0x08004def
 8004d58:	08004def 	.word	0x08004def
 8004d5c:	08004def 	.word	0x08004def
 8004d60:	08004def 	.word	0x08004def
 8004d64:	08004def 	.word	0x08004def
 8004d68:	08004def 	.word	0x08004def
 8004d6c:	08004def 	.word	0x08004def
 8004d70:	08004def 	.word	0x08004def
 8004d74:	08004def 	.word	0x08004def
 8004d78:	08004def 	.word	0x08004def
 8004d7c:	08004def 	.word	0x08004def
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d02e      	beq.n	8004de6 <UART_SetConfig+0xa36>
 8004d88:	e031      	b.n	8004dee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d8a:	f7fd fff5 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d90:	e033      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d92:	f7fe f807 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8004d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d98:	e02f      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe f82c 	bl	8002dfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004da8:	e027      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004daa:	f107 0318 	add.w	r3, r7, #24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe f978 	bl	80030a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db8:	e01f      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dba:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <UART_SetConfig+0xac0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <UART_SetConfig+0xac0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	4a28      	ldr	r2, [pc, #160]	@ (8004e74 <UART_SetConfig+0xac4>)
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dd8:	e00f      	b.n	8004dfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004dda:	4b26      	ldr	r3, [pc, #152]	@ (8004e74 <UART_SetConfig+0xac4>)
 8004ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dde:	e00c      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004de0:	4b25      	ldr	r3, [pc, #148]	@ (8004e78 <UART_SetConfig+0xac8>)
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004df8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d021      	beq.n	8004e44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <UART_SetConfig+0xacc>)
 8004e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	441a      	add	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d909      	bls.n	8004e3e <UART_SetConfig+0xa8e>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e30:	d205      	bcs.n	8004e3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e002      	b.n	8004e44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3748      	adds	r7, #72	@ 0x48
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	58024400 	.word	0x58024400
 8004e74:	03d09000 	.word	0x03d09000
 8004e78:	003d0900 	.word	0x003d0900
 8004e7c:	0800534c 	.word	0x0800534c

08004e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7e:	d10a      	bne.n	8004f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b098      	sub	sp, #96	@ 0x60
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd4:	f7fc fade 	bl	8001594 <HAL_GetTick>
 8004fd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d12f      	bne.n	8005048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f88e 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d022      	beq.n	8005048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005016:	653b      	str	r3, [r7, #80]	@ 0x50
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005020:	647b      	str	r3, [r7, #68]	@ 0x44
 8005022:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e063      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d149      	bne.n	80050ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005056:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f857 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03c      	beq.n	80050ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	623b      	str	r3, [r7, #32]
   return(result);
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c2:	61fa      	str	r2, [r7, #28]
 80050c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69b9      	ldr	r1, [r7, #24]
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	617b      	str	r3, [r7, #20]
   return(result);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e012      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3758      	adds	r7, #88	@ 0x58
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	e04f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005130:	d04b      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fc fa2f 	bl	8001594 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <UART_WaitOnFlagUntilTimeout+0x30>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e04e      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d037      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b80      	cmp	r3, #128	@ 0x80
 800515e:	d034      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b40      	cmp	r3, #64	@ 0x40
 8005164:	d031      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d110      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2208      	movs	r2, #8
 800517a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f839 	bl	80051f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2208      	movs	r2, #8
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e029      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051a4:	d111      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f81f 	bl	80051f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00f      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d0a0      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b095      	sub	sp, #84	@ 0x54
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521a:	643b      	str	r3, [r7, #64]	@ 0x40
 800521c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005220:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	61fb      	str	r3, [r7, #28]
   return(result);
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	4b1e      	ldr	r3, [pc, #120]	@ (80052bc <UART_EndRxTransfer+0xc8>)
 8005242:	4013      	ands	r3, r2
 8005244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800524e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d118      	bne.n	800529c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	60bb      	str	r3, [r7, #8]
   return(result);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f023 0310 	bic.w	r3, r3, #16
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6979      	ldr	r1, [r7, #20]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	613b      	str	r3, [r7, #16]
   return(result);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052b0:	bf00      	nop
 80052b2:	3754      	adds	r7, #84	@ 0x54
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	effffffe 	.word	0xeffffffe

080052c0 <memset>:
 80052c0:	4402      	add	r2, r0
 80052c2:	4603      	mov	r3, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d100      	bne.n	80052ca <memset+0xa>
 80052c8:	4770      	bx	lr
 80052ca:	f803 1b01 	strb.w	r1, [r3], #1
 80052ce:	e7f9      	b.n	80052c4 <memset+0x4>

080052d0 <__libc_init_array>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005308 <__libc_init_array+0x38>)
 80052d4:	4c0d      	ldr	r4, [pc, #52]	@ (800530c <__libc_init_array+0x3c>)
 80052d6:	1b64      	subs	r4, r4, r5
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	2600      	movs	r6, #0
 80052dc:	42a6      	cmp	r6, r4
 80052de:	d109      	bne.n	80052f4 <__libc_init_array+0x24>
 80052e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005310 <__libc_init_array+0x40>)
 80052e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005314 <__libc_init_array+0x44>)
 80052e4:	f000 f818 	bl	8005318 <_init>
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	2600      	movs	r6, #0
 80052ee:	42a6      	cmp	r6, r4
 80052f0:	d105      	bne.n	80052fe <__libc_init_array+0x2e>
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f8:	4798      	blx	r3
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7ee      	b.n	80052dc <__libc_init_array+0xc>
 80052fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005302:	4798      	blx	r3
 8005304:	3601      	adds	r6, #1
 8005306:	e7f2      	b.n	80052ee <__libc_init_array+0x1e>
 8005308:	0800536c 	.word	0x0800536c
 800530c:	0800536c 	.word	0x0800536c
 8005310:	0800536c 	.word	0x0800536c
 8005314:	08005370 	.word	0x08005370

08005318 <_init>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr

08005324 <_fini>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr
